<?php
/**
 * RegistrationApi
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Api;

use \RusticiSoftware\Cloud\V2\Configuration;
use \RusticiSoftware\Cloud\V2\ApiClient;
use \RusticiSoftware\Cloud\V2\ApiException;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * RegistrationApi Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegistrationApi
{

    /**
     * API Client
     *
     * @var \RusticiSoftware\Cloud\V2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RusticiSoftware\Cloud\V2\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.cloud.scorm.com/api/v2/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RusticiSoftware\Cloud\V2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient $apiClient set the API client
     *
     * @return RegistrationApi
     */
    public function setApiClient(\RusticiSoftware\Cloud\V2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createNewRegistrationInstance
     *
     * Create a new instance for this registration specified by the registration ID
     *
     * @param string $registration_id id for this registration (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createNewRegistrationInstance($registration_id)
    {
        list($response) = $this->createNewRegistrationInstanceWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation createNewRegistrationInstanceWithHttpInfo
     *
     * Create a new instance for this registration specified by the registration ID
     *
     * @param string $registration_id id for this registration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createNewRegistrationInstanceWithHttpInfo($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling createNewRegistrationInstance');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/instances'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createRegistration
     *
     * Create a registration.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreateRegistrationSchema $registration  (required)
     * @param int $course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createRegistration($registration, $course_version = null)
    {
        list($response) = $this->createRegistrationWithHttpInfo($registration, $course_version);
        return $response;
    }

    /**
     * Operation createRegistrationWithHttpInfo
     *
     * Create a registration.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreateRegistrationSchema $registration  (required)
     * @param int $course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createRegistrationWithHttpInfo($registration, $course_version = null)
    {
        // verify the required parameter 'registration' is set
        if ($registration === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration when calling createRegistration');
        }
        // parse inputs
        $resourcePath = "/registrations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($course_version !== null) {
            $queryParams['courseVersion'] = $this->apiClient->getSerializer()->toQueryValue($course_version);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($registration)) {
            $_tempBody = $registration;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRegistration
     *
     * Delete `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistration($registration_id)
    {
        list($response) = $this->deleteRegistrationWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation deleteRegistrationWithHttpInfo
     *
     * Delete `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationWithHttpInfo($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling deleteRegistration');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRegistrationConfigurationSetting
     *
     * Clears the `settingId` value for this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param string $setting_id  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationConfigurationSetting($registration_id, $setting_id)
    {
        list($response) = $this->deleteRegistrationConfigurationSettingWithHttpInfo($registration_id, $setting_id);
        return $response;
    }

    /**
     * Operation deleteRegistrationConfigurationSettingWithHttpInfo
     *
     * Clears the `settingId` value for this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param string $setting_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationConfigurationSettingWithHttpInfo($registration_id, $setting_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling deleteRegistrationConfigurationSetting');
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $setting_id when calling deleteRegistrationConfigurationSetting');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/configuration/{settingId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                "{" . "settingId" . "}",
                $this->apiClient->getSerializer()->toPathValue($setting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/configuration/{settingId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRegistrationInstanceConfigurationSetting
     *
     * Clears the `settingId` value for this registration instance
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param string $setting_id  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationInstanceConfigurationSetting($registration_id, $instance_id, $setting_id)
    {
        list($response) = $this->deleteRegistrationInstanceConfigurationSettingWithHttpInfo($registration_id, $instance_id, $setting_id);
        return $response;
    }

    /**
     * Operation deleteRegistrationInstanceConfigurationSettingWithHttpInfo
     *
     * Clears the `settingId` value for this registration instance
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param string $setting_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationInstanceConfigurationSettingWithHttpInfo($registration_id, $instance_id, $setting_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling deleteRegistrationInstanceConfigurationSetting');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling deleteRegistrationInstanceConfigurationSetting');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.deleteRegistrationInstanceConfigurationSetting, must be bigger than or equal to 0.0.');
        }

        // verify the required parameter 'setting_id' is set
        if ($setting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $setting_id when calling deleteRegistrationInstanceConfigurationSetting');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                "{" . "settingId" . "}",
                $this->apiClient->getSerializer()->toPathValue($setting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRegistrationProgress
     *
     * Delete registration progress (clear registration)
     *
     * @param string $registration_id id for this registration (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationProgress($registration_id)
    {
        list($response) = $this->deleteRegistrationProgressWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation deleteRegistrationProgressWithHttpInfo
     *
     * Delete registration progress (clear registration)
     *
     * @param string $registration_id id for this registration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationProgressWithHttpInfo($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling deleteRegistrationProgress');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/progress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/progress'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRegistrationsGlobalData
     *
     * Delete global data associated with `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationsGlobalData($registration_id)
    {
        list($response) = $this->deleteRegistrationsGlobalDataWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation deleteRegistrationsGlobalDataWithHttpInfo
     *
     * Delete global data associated with `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteRegistrationsGlobalDataWithHttpInfo($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling deleteRegistrationsGlobalData');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/globalData";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/globalData'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationConfiguration
     *
     * Returns all configuration settings for this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_metadata  (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\SettingListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationConfiguration($registration_id, $include_metadata = null)
    {
        list($response) = $this->getRegistrationConfigurationWithHttpInfo($registration_id, $include_metadata);
        return $response;
    }

    /**
     * Operation getRegistrationConfigurationWithHttpInfo
     *
     * Returns all configuration settings for this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_metadata  (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\SettingListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationConfigurationWithHttpInfo($registration_id, $include_metadata = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationConfiguration');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_metadata !== null) {
            $queryParams['includeMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_metadata);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\SettingListSchema',
                '/registrations/{registrationId}/configuration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationInstanceConfiguration
     *
     * Returns all configuration settings for this registration instance
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_metadata  (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\SettingListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceConfiguration($registration_id, $instance_id, $include_metadata = null)
    {
        list($response) = $this->getRegistrationInstanceConfigurationWithHttpInfo($registration_id, $instance_id, $include_metadata);
        return $response;
    }

    /**
     * Operation getRegistrationInstanceConfigurationWithHttpInfo
     *
     * Returns all configuration settings for this registration instance
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_metadata  (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\SettingListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceConfigurationWithHttpInfo($registration_id, $instance_id, $include_metadata = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationInstanceConfiguration');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getRegistrationInstanceConfiguration');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.getRegistrationInstanceConfiguration, must be bigger than or equal to 0.0.');
        }

        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_metadata !== null) {
            $queryParams['includeMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_metadata);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\SettingListSchema',
                '/registrations/{registrationId}/instances/{instanceId}/configuration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationInstanceLaunchHistory
     *
     * Returns history of this registration's launches
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_history_log Whether to include the history log in the launch history (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceLaunchHistory($registration_id, $instance_id, $include_history_log = null)
    {
        list($response) = $this->getRegistrationInstanceLaunchHistoryWithHttpInfo($registration_id, $instance_id, $include_history_log);
        return $response;
    }

    /**
     * Operation getRegistrationInstanceLaunchHistoryWithHttpInfo
     *
     * Returns history of this registration's launches
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_history_log Whether to include the history log in the launch history (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceLaunchHistoryWithHttpInfo($registration_id, $instance_id, $include_history_log = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationInstanceLaunchHistory');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getRegistrationInstanceLaunchHistory');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.getRegistrationInstanceLaunchHistory, must be bigger than or equal to 0.0.');
        }

        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}/launchHistory";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_history_log !== null) {
            $queryParams['includeHistoryLog'] = $this->apiClient->getSerializer()->toQueryValue($include_history_log);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema',
                '/registrations/{registrationId}/instances/{instanceId}/launchHistory'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationInstanceProgress
     *
     * Get registration progress for instance `instanceId` of `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\RegistrationSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceProgress($registration_id, $instance_id, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        list($response) = $this->getRegistrationInstanceProgressWithHttpInfo($registration_id, $instance_id, $include_child_results, $include_interactions_and_objectives, $include_runtime);
        return $response;
    }

    /**
     * Operation getRegistrationInstanceProgressWithHttpInfo
     *
     * Get registration progress for instance `instanceId` of `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\RegistrationSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceProgressWithHttpInfo($registration_id, $instance_id, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationInstanceProgress');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getRegistrationInstanceProgress');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.getRegistrationInstanceProgress, must be bigger than or equal to 0.0.');
        }

        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_child_results !== null) {
            $queryParams['includeChildResults'] = $this->apiClient->getSerializer()->toQueryValue($include_child_results);
        }
        // query params
        if ($include_interactions_and_objectives !== null) {
            $queryParams['includeInteractionsAndObjectives'] = $this->apiClient->getSerializer()->toQueryValue($include_interactions_and_objectives);
        }
        // query params
        if ($include_runtime !== null) {
            $queryParams['includeRuntime'] = $this->apiClient->getSerializer()->toQueryValue($include_runtime);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema',
                '/registrations/{registrationId}/instances/{instanceId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationInstanceStatements
     *
     * Get xAPI statements for instance `instanceId` of `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementResult
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceStatements($registration_id, $instance_id, $since = null, $until = null, $more = null)
    {
        list($response) = $this->getRegistrationInstanceStatementsWithHttpInfo($registration_id, $instance_id, $since, $until, $more);
        return $response;
    }

    /**
     * Operation getRegistrationInstanceStatementsWithHttpInfo
     *
     * Get xAPI statements for instance `instanceId` of `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\XapiStatementResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstanceStatementsWithHttpInfo($registration_id, $instance_id, $since = null, $until = null, $more = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationInstanceStatements');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling getRegistrationInstanceStatements');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.getRegistrationInstanceStatements, must be bigger than or equal to 0.0.');
        }

        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}/xAPIStatements";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult',
                '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationInstances
     *
     * Get all the instances of this the registration specified by the registration ID
     *
     * @param string $registration_id id for this registration (required)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\RegistrationListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstances($registration_id, $until = null, $since = null, $more = null, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        list($response) = $this->getRegistrationInstancesWithHttpInfo($registration_id, $until, $since, $more, $include_child_results, $include_interactions_and_objectives, $include_runtime);
        return $response;
    }

    /**
     * Operation getRegistrationInstancesWithHttpInfo
     *
     * Get all the instances of this the registration specified by the registration ID
     *
     * @param string $registration_id id for this registration (required)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\RegistrationListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationInstancesWithHttpInfo($registration_id, $until = null, $since = null, $more = null, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationInstances');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // query params
        if ($include_child_results !== null) {
            $queryParams['includeChildResults'] = $this->apiClient->getSerializer()->toQueryValue($include_child_results);
        }
        // query params
        if ($include_interactions_and_objectives !== null) {
            $queryParams['includeInteractionsAndObjectives'] = $this->apiClient->getSerializer()->toQueryValue($include_interactions_and_objectives);
        }
        // query params
        if ($include_runtime !== null) {
            $queryParams['includeRuntime'] = $this->apiClient->getSerializer()->toQueryValue($include_runtime);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema',
                '/registrations/{registrationId}/instances'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationLaunchHistory
     *
     * Returns history of this registration's launches
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_history_log Whether to include the history log in the launch history (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationLaunchHistory($registration_id, $include_history_log = null)
    {
        list($response) = $this->getRegistrationLaunchHistoryWithHttpInfo($registration_id, $include_history_log);
        return $response;
    }

    /**
     * Operation getRegistrationLaunchHistoryWithHttpInfo
     *
     * Returns history of this registration's launches
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_history_log Whether to include the history log in the launch history (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationLaunchHistoryWithHttpInfo($registration_id, $include_history_log = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationLaunchHistory');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/launchHistory";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_history_log !== null) {
            $queryParams['includeHistoryLog'] = $this->apiClient->getSerializer()->toQueryValue($include_history_log);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema',
                '/registrations/{registrationId}/launchHistory'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\LaunchHistoryListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationLaunchLink
     *
     * Returns the link to use to launch this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @return \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationLaunchLink($registration_id, $launch_link_request)
    {
        list($response) = $this->getRegistrationLaunchLinkWithHttpInfo($registration_id, $launch_link_request);
        return $response;
    }

    /**
     * Operation getRegistrationLaunchLinkWithHttpInfo
     *
     * Returns the link to use to launch this registration
     *
     * @param string $registration_id id for this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationLaunchLinkWithHttpInfo($registration_id, $launch_link_request)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationLaunchLink');
        }
        // verify the required parameter 'launch_link_request' is set
        if ($launch_link_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $launch_link_request when calling getRegistrationLaunchLink');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/launchLink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($launch_link_request)) {
            $_tempBody = $launch_link_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema',
                '/registrations/{registrationId}/launchLink'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationProgress
     *
     * Get registration progress for `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\RegistrationSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationProgress($registration_id, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        list($response) = $this->getRegistrationProgressWithHttpInfo($registration_id, $include_child_results, $include_interactions_and_objectives, $include_runtime);
        return $response;
    }

    /**
     * Operation getRegistrationProgressWithHttpInfo
     *
     * Get registration progress for `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\RegistrationSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationProgressWithHttpInfo($registration_id, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationProgress');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_child_results !== null) {
            $queryParams['includeChildResults'] = $this->apiClient->getSerializer()->toQueryValue($include_child_results);
        }
        // query params
        if ($include_interactions_and_objectives !== null) {
            $queryParams['includeInteractionsAndObjectives'] = $this->apiClient->getSerializer()->toQueryValue($include_interactions_and_objectives);
        }
        // query params
        if ($include_runtime !== null) {
            $queryParams['includeRuntime'] = $this->apiClient->getSerializer()->toQueryValue($include_runtime);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema',
                '/registrations/{registrationId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrationStatements
     *
     * Get xAPI statements for `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementResult
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationStatements($registration_id, $since = null, $until = null, $more = null)
    {
        list($response) = $this->getRegistrationStatementsWithHttpInfo($registration_id, $since, $until, $more);
        return $response;
    }

    /**
     * Operation getRegistrationStatementsWithHttpInfo
     *
     * Get xAPI statements for `registrationId`
     *
     * @param string $registration_id id for this registration (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\XapiStatementResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationStatementsWithHttpInfo($registration_id, $since = null, $until = null, $more = null)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling getRegistrationStatements');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/xAPIStatements";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult',
                '/registrations/{registrationId}/xAPIStatements'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRegistrations
     *
     * Gets a list of registrations including a summary of the status of each registration.
     *
     * @param string $course_id Only registrations for the specified course id will be included. (optional)
     * @param string $learner_id Only registrations for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\RegistrationListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrations($course_id = null, $learner_id = null, $since = null, $until = null, $more = null, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        list($response) = $this->getRegistrationsWithHttpInfo($course_id, $learner_id, $since, $until, $more, $include_child_results, $include_interactions_and_objectives, $include_runtime);
        return $response;
    }

    /**
     * Operation getRegistrationsWithHttpInfo
     *
     * Gets a list of registrations including a summary of the status of each registration.
     *
     * @param string $course_id Only registrations for the specified course id will be included. (optional)
     * @param string $learner_id Only registrations for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param bool $include_child_results Include information about each learning object, not just the top level in the results (optional, default to false)
     * @param bool $include_interactions_and_objectives Include interactions and objectives in the results (optional, default to false)
     * @param bool $include_runtime Include runtime details in the results (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\RegistrationListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getRegistrationsWithHttpInfo($course_id = null, $learner_id = null, $since = null, $until = null, $more = null, $include_child_results = null, $include_interactions_and_objectives = null, $include_runtime = null)
    {
        // parse inputs
        $resourcePath = "/registrations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($learner_id !== null) {
            $queryParams['learnerId'] = $this->apiClient->getSerializer()->toQueryValue($learner_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // query params
        if ($include_child_results !== null) {
            $queryParams['includeChildResults'] = $this->apiClient->getSerializer()->toQueryValue($include_child_results);
        }
        // query params
        if ($include_interactions_and_objectives !== null) {
            $queryParams['includeInteractionsAndObjectives'] = $this->apiClient->getSerializer()->toQueryValue($include_interactions_and_objectives);
        }
        // query params
        if ($include_runtime !== null) {
            $queryParams['includeRuntime'] = $this->apiClient->getSerializer()->toQueryValue($include_runtime);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema',
                '/registrations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\RegistrationListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation registrationExists
     *
     * Does this registration exist?
     *
     * @param string $registration_id id for this registration (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function registrationExists($registration_id)
    {
        list($response) = $this->registrationExistsWithHttpInfo($registration_id);
        return $response;
    }

    /**
     * Operation registrationExistsWithHttpInfo
     *
     * Does this registration exist?
     *
     * @param string $registration_id id for this registration (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function registrationExistsWithHttpInfo($registration_id)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling registrationExists');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setRegistrationConfiguration
     *
     * Set configuration settings for this registration.
     *
     * @param string $registration_id id for this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setRegistrationConfiguration($registration_id, $configuration_settings)
    {
        list($response) = $this->setRegistrationConfigurationWithHttpInfo($registration_id, $configuration_settings);
        return $response;
    }

    /**
     * Operation setRegistrationConfigurationWithHttpInfo
     *
     * Set configuration settings for this registration.
     *
     * @param string $registration_id id for this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setRegistrationConfigurationWithHttpInfo($registration_id, $configuration_settings)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling setRegistrationConfiguration');
        }
        // verify the required parameter 'configuration_settings' is set
        if ($configuration_settings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_settings when calling setRegistrationConfiguration');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_settings)) {
            $_tempBody = $configuration_settings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/configuration'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setRegistrationInstanceConfiguration
     *
     * Set configuration settings for this registration instance.
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setRegistrationInstanceConfiguration($registration_id, $instance_id, $configuration_settings)
    {
        list($response) = $this->setRegistrationInstanceConfigurationWithHttpInfo($registration_id, $instance_id, $configuration_settings);
        return $response;
    }

    /**
     * Operation setRegistrationInstanceConfigurationWithHttpInfo
     *
     * Set configuration settings for this registration instance.
     *
     * @param string $registration_id id for this registration (required)
     * @param int $instance_id The instance of this registration (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setRegistrationInstanceConfigurationWithHttpInfo($registration_id, $instance_id, $configuration_settings)
    {
        // verify the required parameter 'registration_id' is set
        if ($registration_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registration_id when calling setRegistrationInstanceConfiguration');
        }
        // verify the required parameter 'instance_id' is set
        if ($instance_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $instance_id when calling setRegistrationInstanceConfiguration');
        }
        if (($instance_id < 0.0)) {
            throw new \InvalidArgumentException('invalid value for "$instance_id" when calling RegistrationApi.setRegistrationInstanceConfiguration, must be bigger than or equal to 0.0.');
        }

        // verify the required parameter 'configuration_settings' is set
        if ($configuration_settings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_settings when calling setRegistrationInstanceConfiguration');
        }
        // parse inputs
        $resourcePath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($registration_id !== null) {
            $resourcePath = str_replace(
                "{" . "registrationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($registration_id),
                $resourcePath
            );
        }
        // path params
        if ($instance_id !== null) {
            $resourcePath = str_replace(
                "{" . "instanceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($instance_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_settings)) {
            $_tempBody = $configuration_settings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/registrations/{registrationId}/instances/{instanceId}/configuration'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
