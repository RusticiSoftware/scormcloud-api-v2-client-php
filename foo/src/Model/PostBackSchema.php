<?php
/**
 * PostBackSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;

/**
 * PostBackSchema Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     RusticiSoftware\Cloud\V2
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostBackSchema implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PostBackSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'url' => 'string',
        'auth_type' => 'string',
        'user_name' => 'string',
        'password' => 'string',
        'results_format' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'url' => 'url',
        'auth_type' => 'authType',
        'user_name' => 'userName',
        'password' => 'password',
        'results_format' => 'resultsFormat'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'url' => 'setUrl',
        'auth_type' => 'setAuthType',
        'user_name' => 'setUserName',
        'password' => 'setPassword',
        'results_format' => 'setResultsFormat'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'url' => 'getUrl',
        'auth_type' => 'getAuthType',
        'user_name' => 'getUserName',
        'password' => 'getPassword',
        'results_format' => 'getResultsFormat'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const AUTH_TYPE_UNDEFINED = 'UNDEFINED';
    const AUTH_TYPE_FORM = 'FORM';
    const AUTH_TYPE_HTTPBASIC = 'HTTPBASIC';
    const RESULTS_FORMAT_COURSE = 'COURSE';
    const RESULTS_FORMAT_ACTIVITY = 'ACTIVITY';
    const RESULTS_FORMAT_FULL = 'FULL';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_UNDEFINED,
            self::AUTH_TYPE_FORM,
            self::AUTH_TYPE_HTTPBASIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getResultsFormatAllowableValues()
    {
        return [
            self::RESULTS_FORMAT_COURSE,
            self::RESULTS_FORMAT_ACTIVITY,
            self::RESULTS_FORMAT_FULL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['auth_type'] = isset($data['auth_type']) ? $data['auth_type'] : 'UNDEFINED';
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['results_format'] = isset($data['results_format']) ? $data['results_format'] : 'COURSE';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("UNDEFINED", "FORM", "HTTPBASIC");
        if (!in_array($this->container['auth_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'auth_type', must be one of #{allowed_values}.";
        }

        $allowed_values = array("COURSE", "ACTIVITY", "FULL");
        if (!in_array($this->container['results_format'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'results_format', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("UNDEFINED", "FORM", "HTTPBASIC");
        if (!in_array($this->container['auth_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("COURSE", "ACTIVITY", "FULL");
        if (!in_array($this->container['results_format'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets auth_type
     * @return string
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     * @param string $auth_type Optional parameter to specify how to authorize against the given postbackurl, can be 'form' or 'httpbasic'. If form authentication, the username and password for authentication are submitted as form fields 'username' and 'password', and the registration data as the form field 'data'. If httpbasic authentication is used, the username and password are placed in the standard Authorization HTTP header, and the registration data is the body of the message (sent as text/xml content type). This field is set to 'form' by default.
     * @return $this
     */
    public function setAuthType($auth_type)
    {
        $allowed_values = array('UNDEFINED', 'FORM', 'HTTPBASIC');
        if (!in_array($auth_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'auth_type', must be one of 'UNDEFINED', 'FORM', 'HTTPBASIC'");
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets user_name
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     * @param string $user_name The user name to be used in authorizing the postback of data to the URL specified by postback url.
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password The password to be used in authorizing the postback of data to the URL specified by postback url.
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets results_format
     * @return string
     */
    public function getResultsFormat()
    {
        return $this->container['results_format'];
    }

    /**
     * Sets results_format
     * @param string $results_format This parameter allows you to specify a level of detail in the information that is posted back while the course is being taken. It may be one of three values: 'course' (course summary), 'activity' (activity summary, or 'full' (full detail), and is set to 'course' by default. The information will be posted as xml, and the format of that xml is specified below under the method 'getRegistrationResult'
     * @return $this
     */
    public function setResultsFormat($results_format)
    {
        $allowed_values = array('COURSE', 'ACTIVITY', 'FULL');
        if (!in_array($results_format, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'results_format', must be one of 'COURSE', 'ACTIVITY', 'FULL'");
        }
        $this->container['results_format'] = $results_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


