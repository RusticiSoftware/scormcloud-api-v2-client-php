<?php
/**
 * InvitationsApi
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Api;

use \RusticiSoftware\Cloud\V2\ApiClient;
use \RusticiSoftware\Cloud\V2\ApiException;
use \RusticiSoftware\Cloud\V2\Configuration;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * InvitationsApi Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvitationsApi
{
    /**
     * API Client
     *
     * @var \RusticiSoftware\Cloud\V2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RusticiSoftware\Cloud\V2\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RusticiSoftware\Cloud\V2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient $apiClient set the API client
     *
     * @return InvitationsApi
     */
    public function setApiClient(\RusticiSoftware\Cloud\V2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPrivateInvitation
     *
     * Create a private invitation to a course.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreatePrivateInvitationSchema $private_invitation_request  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\InvitationSummarySchema
     */
    public function createPrivateInvitation($private_invitation_request)
    {
        list($response) = $this->createPrivateInvitationWithHttpInfo($private_invitation_request);
        return $response;
    }

    /**
     * Operation createPrivateInvitationWithHttpInfo
     *
     * Create a private invitation to a course.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreatePrivateInvitationSchema $private_invitation_request  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\InvitationSummarySchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPrivateInvitationWithHttpInfo($private_invitation_request)
    {
        // verify the required parameter 'private_invitation_request' is set
        if ($private_invitation_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $private_invitation_request when calling createPrivateInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/private";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($private_invitation_request)) {
            $_tempBody = $private_invitation_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\InvitationSummarySchema',
                '/invitations/private'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\InvitationSummarySchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\InvitationSummarySchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPublicInvitation
     *
     * Create a publicly accessible invitation to a course.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreatePublicInvitationSchema $public_invitation_request A description of the public invitation to be created. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema
     */
    public function createPublicInvitation($public_invitation_request)
    {
        list($response) = $this->createPublicInvitationWithHttpInfo($public_invitation_request);
        return $response;
    }

    /**
     * Operation createPublicInvitationWithHttpInfo
     *
     * Create a publicly accessible invitation to a course.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\CreatePublicInvitationSchema $public_invitation_request A description of the public invitation to be created. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPublicInvitationWithHttpInfo($public_invitation_request)
    {
        // verify the required parameter 'public_invitation_request' is set
        if ($public_invitation_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $public_invitation_request when calling createPublicInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/public";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($public_invitation_request)) {
            $_tempBody = $public_invitation_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema',
                '/invitations/public'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteInvitationTags
     *
     * Delete the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteInvitationTags($invitation_id, $tags)
    {
        list($response) = $this->deleteInvitationTagsWithHttpInfo($invitation_id, $tags);
        return $response;
    }

    /**
     * Operation deleteInvitationTagsWithHttpInfo
     *
     * Delete the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInvitationTagsWithHttpInfo($invitation_id, $tags)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling deleteInvitationTags');
        }
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling deleteInvitationTags');
        }
        // parse inputs
        $resourcePath = "/invitations/{invitationId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($tags)) {
            $_tempBody = $tags;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invitations/{invitationId}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllInvitations
     *
     * Get a list of invitation summaries.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\InvitationSummaryList
     */
    public function getAllInvitations($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        list($response) = $this->getAllInvitationsWithHttpInfo($course_id, $since, $until, $datetime_filter, $tags, $more);
        return $response;
    }

    /**
     * Operation getAllInvitationsWithHttpInfo
     *
     * Get a list of invitation summaries.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\InvitationSummaryList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllInvitationsWithHttpInfo($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        // parse inputs
        $resourcePath = "/invitations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($datetime_filter !== null) {
            $queryParams['datetimeFilter'] = $this->apiClient->getSerializer()->toQueryValue($datetime_filter);
        }
        // query params
        if (is_array($tags)) {
            $tags = $this->apiClient->getSerializer()->serializeCollection($tags, 'csv', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\InvitationSummaryList',
                '/invitations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\InvitationSummaryList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\InvitationSummaryList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInvitationTags
     *
     * Get the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\TagListSchema
     */
    public function getInvitationTags($invitation_id)
    {
        list($response) = $this->getInvitationTagsWithHttpInfo($invitation_id);
        return $response;
    }

    /**
     * Operation getInvitationTagsWithHttpInfo
     *
     * Get the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\TagListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvitationTagsWithHttpInfo($invitation_id)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getInvitationTags');
        }
        // parse inputs
        $resourcePath = "/invitations/{invitationId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\TagListSchema',
                '/invitations/{invitationId}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\TagListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\TagListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateInvitation
     *
     * Get a information about a private invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema
     */
    public function getPrivateInvitation($invitation_id, $include_registration_count = null)
    {
        list($response) = $this->getPrivateInvitationWithHttpInfo($invitation_id, $include_registration_count);
        return $response;
    }

    /**
     * Operation getPrivateInvitationWithHttpInfo
     *
     * Get a information about a private invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivateInvitationWithHttpInfo($invitation_id, $include_registration_count = null)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getPrivateInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/private/{invitationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema',
                '/invitations/private/{invitationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateInvitationJobStatus
     *
     * Get the status of an invitation job.
     *
     * @param string $invitation_id invitation id (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\InvitationJobStatusSchema
     */
    public function getPrivateInvitationJobStatus($invitation_id)
    {
        list($response) = $this->getPrivateInvitationJobStatusWithHttpInfo($invitation_id);
        return $response;
    }

    /**
     * Operation getPrivateInvitationJobStatusWithHttpInfo
     *
     * Get the status of an invitation job.
     *
     * @param string $invitation_id invitation id (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\InvitationJobStatusSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivateInvitationJobStatusWithHttpInfo($invitation_id)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getPrivateInvitationJobStatus');
        }
        // parse inputs
        $resourcePath = "/invitations/private/{invitationId}/jobStatus";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\InvitationJobStatusSchema',
                '/invitations/private/{invitationId}/jobStatus'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\InvitationJobStatusSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\InvitationJobStatusSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateInvitations
     *
     * Get a list of all private invitations.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PrivateInvitationList
     */
    public function getPrivateInvitations($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        list($response) = $this->getPrivateInvitationsWithHttpInfo($course_id, $since, $until, $datetime_filter, $tags, $more);
        return $response;
    }

    /**
     * Operation getPrivateInvitationsWithHttpInfo
     *
     * Get a list of all private invitations.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PrivateInvitationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivateInvitationsWithHttpInfo($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        // parse inputs
        $resourcePath = "/invitations/private";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($datetime_filter !== null) {
            $queryParams['datetimeFilter'] = $this->apiClient->getSerializer()->toQueryValue($datetime_filter);
        }
        // query params
        if (is_array($tags)) {
            $tags = $this->apiClient->getSerializer()->serializeCollection($tags, 'csv', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationList',
                '/invitations/private'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPrivateUserInvitations
     *
     * Get a list of user invitations.
     *
     * @param string $invitation_id invitation id (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_report  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\UserInvitationList
     */
    public function getPrivateUserInvitations($invitation_id, $since = null, $until = null, $include_registration_report = null, $more = null)
    {
        list($response) = $this->getPrivateUserInvitationsWithHttpInfo($invitation_id, $since, $until, $include_registration_report, $more);
        return $response;
    }

    /**
     * Operation getPrivateUserInvitationsWithHttpInfo
     *
     * Get a list of user invitations.
     *
     * @param string $invitation_id invitation id (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_report  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\UserInvitationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrivateUserInvitationsWithHttpInfo($invitation_id, $since = null, $until = null, $include_registration_report = null, $more = null)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getPrivateUserInvitations');
        }
        // parse inputs
        $resourcePath = "/invitations/private/{invitationId}/userInvitations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($include_registration_report !== null) {
            $queryParams['includeRegistrationReport'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_report);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\UserInvitationList',
                '/invitations/private/{invitationId}/userInvitations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\UserInvitationList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\UserInvitationList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicInvitation
     *
     * Get a information about a public invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema
     */
    public function getPublicInvitation($invitation_id, $include_registration_count = null)
    {
        list($response) = $this->getPublicInvitationWithHttpInfo($invitation_id, $include_registration_count);
        return $response;
    }

    /**
     * Operation getPublicInvitationWithHttpInfo
     *
     * Get a information about a public invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicInvitationWithHttpInfo($invitation_id, $include_registration_count = null)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getPublicInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/public/{invitationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema',
                '/invitations/public/{invitationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicInvitations
     *
     * Get a list of all public invitations.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PublicInvitationList
     */
    public function getPublicInvitations($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        list($response) = $this->getPublicInvitationsWithHttpInfo($course_id, $since, $until, $datetime_filter, $tags, $more);
        return $response;
    }

    /**
     * Operation getPublicInvitationsWithHttpInfo
     *
     * Get a list of all public invitations.
     *
     * @param string $course_id Limit the results to invitations with courseIds that match the filter. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)
     * @param string[] $tags  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PublicInvitationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicInvitationsWithHttpInfo($course_id = null, $since = null, $until = null, $datetime_filter = null, $tags = null, $more = null)
    {
        // parse inputs
        $resourcePath = "/invitations/public";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($datetime_filter !== null) {
            $queryParams['datetimeFilter'] = $this->apiClient->getSerializer()->toQueryValue($datetime_filter);
        }
        // query params
        if (is_array($tags)) {
            $tags = $this->apiClient->getSerializer()->serializeCollection($tags, 'csv', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PublicInvitationList',
                '/invitations/public'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PublicInvitationList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PublicInvitationList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPublicUserInvitations
     *
     * Get a list of user invitations.
     *
     * @param string $invitation_id invitation id (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_report  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\UserInvitationList
     */
    public function getPublicUserInvitations($invitation_id, $since = null, $until = null, $include_registration_report = null, $more = null)
    {
        list($response) = $this->getPublicUserInvitationsWithHttpInfo($invitation_id, $since, $until, $include_registration_report, $more);
        return $response;
    }

    /**
     * Operation getPublicUserInvitationsWithHttpInfo
     *
     * Get a list of user invitations.
     *
     * @param string $invitation_id invitation id (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_report  (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\UserInvitationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicUserInvitationsWithHttpInfo($invitation_id, $since = null, $until = null, $include_registration_report = null, $more = null)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling getPublicUserInvitations');
        }
        // parse inputs
        $resourcePath = "/invitations/public/{invitationId}/userInvitations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($include_registration_report !== null) {
            $queryParams['includeRegistrationReport'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_report);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\UserInvitationList',
                '/invitations/public/{invitationId}/userInvitations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\UserInvitationList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\UserInvitationList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putInvitationTags
     *
     * Set the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function putInvitationTags($invitation_id, $tags)
    {
        list($response) = $this->putInvitationTagsWithHttpInfo($invitation_id, $tags);
        return $response;
    }

    /**
     * Operation putInvitationTagsWithHttpInfo
     *
     * Set the tags for this invitation
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putInvitationTagsWithHttpInfo($invitation_id, $tags)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling putInvitationTags');
        }
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling putInvitationTags');
        }
        // parse inputs
        $resourcePath = "/invitations/{invitationId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($tags)) {
            $_tempBody = $tags;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invitations/{invitationId}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putInvitationTagsBatch
     *
     * Sets all of the provided tags on all of the provided invitations
     *
     * @param \RusticiSoftware\Cloud\V2\Model\BatchTagsSchema $batch Object representing an array of ids to apply an array of tags to. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function putInvitationTagsBatch($batch)
    {
        list($response) = $this->putInvitationTagsBatchWithHttpInfo($batch);
        return $response;
    }

    /**
     * Operation putInvitationTagsBatchWithHttpInfo
     *
     * Sets all of the provided tags on all of the provided invitations
     *
     * @param \RusticiSoftware\Cloud\V2\Model\BatchTagsSchema $batch Object representing an array of ids to apply an array of tags to. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putInvitationTagsBatchWithHttpInfo($batch)
    {
        // verify the required parameter 'batch' is set
        if ($batch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $batch when calling putInvitationTagsBatch');
        }
        // parse inputs
        $resourcePath = "/invitations/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($batch)) {
            $_tempBody = $batch;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/invitations/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePrivateInvitation
     *
     * Update attributes of this invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema $invitation_update_schema A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema
     */
    public function updatePrivateInvitation($invitation_id, $invitation_update_schema)
    {
        list($response) = $this->updatePrivateInvitationWithHttpInfo($invitation_id, $invitation_update_schema);
        return $response;
    }

    /**
     * Operation updatePrivateInvitationWithHttpInfo
     *
     * Update attributes of this invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema $invitation_update_schema A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePrivateInvitationWithHttpInfo($invitation_id, $invitation_update_schema)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling updatePrivateInvitation');
        }
        // verify the required parameter 'invitation_update_schema' is set
        if ($invitation_update_schema === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_update_schema when calling updatePrivateInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/private/{invitationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($invitation_update_schema)) {
            $_tempBody = $invitation_update_schema;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema',
                '/invitations/private/{invitationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PrivateInvitationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePublicInvitation
     *
     * Update attributes of this invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema $invitation_update_schema A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema
     */
    public function updatePublicInvitation($invitation_id, $invitation_update_schema)
    {
        list($response) = $this->updatePublicInvitationWithHttpInfo($invitation_id, $invitation_update_schema);
        return $response;
    }

    /**
     * Operation updatePublicInvitationWithHttpInfo
     *
     * Update attributes of this invitation.
     *
     * @param string $invitation_id invitation id (required)
     * @param \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema $invitation_update_schema A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePublicInvitationWithHttpInfo($invitation_id, $invitation_update_schema)
    {
        // verify the required parameter 'invitation_id' is set
        if ($invitation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_id when calling updatePublicInvitation');
        }
        // verify the required parameter 'invitation_update_schema' is set
        if ($invitation_update_schema === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation_update_schema when calling updatePublicInvitation');
        }
        // parse inputs
        $resourcePath = "/invitations/public/{invitationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($invitation_id !== null) {
            $resourcePath = str_replace(
                "{" . "invitationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($invitation_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($invitation_update_schema)) {
            $_tempBody = $invitation_update_schema;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema',
                '/invitations/public/{invitationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\PublicInvitationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
