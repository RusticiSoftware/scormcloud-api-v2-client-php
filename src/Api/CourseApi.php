<?php
/**
 * CourseApi
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Api;

use \RusticiSoftware\Cloud\V2\ApiClient;
use \RusticiSoftware\Cloud\V2\ApiException;
use \RusticiSoftware\Cloud\V2\Configuration;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * CourseApi Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApi
{
    /**
     * API Client
     *
     * @var \RusticiSoftware\Cloud\V2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RusticiSoftware\Cloud\V2\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RusticiSoftware\Cloud\V2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient $apiClient set the API client
     *
     * @return CourseApi
     */
    public function setApiClient(\RusticiSoftware\Cloud\V2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation buildCoursePreviewLaunchLink
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @param string $css_url  (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema
     */
    public function buildCoursePreviewLaunchLink($course_id, $launch_link_request, $css_url = null)
    {
        list($response) = $this->buildCoursePreviewLaunchLinkWithHttpInfo($course_id, $launch_link_request, $css_url);
        return $response;
    }

    /**
     * Operation buildCoursePreviewLaunchLinkWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @param string $css_url  (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildCoursePreviewLaunchLinkWithHttpInfo($course_id, $launch_link_request, $css_url = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling buildCoursePreviewLaunchLink');
        }
        // verify the required parameter 'launch_link_request' is set
        if ($launch_link_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $launch_link_request when calling buildCoursePreviewLaunchLink');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/preview";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($css_url !== null) {
            $queryParams['cssUrl'] = $this->apiClient->getSerializer()->toQueryValue($css_url);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($launch_link_request)) {
            $_tempBody = $launch_link_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema',
                '/courses/{courseId}/preview'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation buildCoursePreviewLaunchLinkWithVersion
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema
     */
    public function buildCoursePreviewLaunchLinkWithVersion($course_id, $version_id, $launch_link_request)
    {
        list($response) = $this->buildCoursePreviewLaunchLinkWithVersionWithHttpInfo($course_id, $version_id, $launch_link_request);
        return $response;
    }

    /**
     * Operation buildCoursePreviewLaunchLinkWithVersionWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param \RusticiSoftware\Cloud\V2\Model\LaunchLinkRequestSchema $launch_link_request  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildCoursePreviewLaunchLinkWithVersionWithHttpInfo($course_id, $version_id, $launch_link_request)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling buildCoursePreviewLaunchLinkWithVersion');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling buildCoursePreviewLaunchLinkWithVersion');
        }
        // verify the required parameter 'launch_link_request' is set
        if ($launch_link_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $launch_link_request when calling buildCoursePreviewLaunchLinkWithVersion');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}/preview";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($launch_link_request)) {
            $_tempBody = $launch_link_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema',
                '/courses/{courseId}/versions/{versionId}/preview'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\LaunchLinkSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createFetchAndImportCourseJob
     *
     * 
     *
     * @param string $course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use. (required)
     * @param \RusticiSoftware\Cloud\V2\Model\ImportFetchRequestSchema $import_request  (required)
     * @param bool $may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)
     * @param string $postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     */
    public function createFetchAndImportCourseJob($course_id, $import_request, $may_create_new_version = null, $postback_url = null)
    {
        list($response) = $this->createFetchAndImportCourseJobWithHttpInfo($course_id, $import_request, $may_create_new_version, $postback_url);
        return $response;
    }

    /**
     * Operation createFetchAndImportCourseJobWithHttpInfo
     *
     * 
     *
     * @param string $course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use. (required)
     * @param \RusticiSoftware\Cloud\V2\Model\ImportFetchRequestSchema $import_request  (required)
     * @param bool $may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)
     * @param string $postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFetchAndImportCourseJobWithHttpInfo($course_id, $import_request, $may_create_new_version = null, $postback_url = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling createFetchAndImportCourseJob');
        }
        // verify the required parameter 'import_request' is set
        if ($import_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_request when calling createFetchAndImportCourseJob');
        }
        // parse inputs
        $resourcePath = "/courses/importJobs";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($may_create_new_version !== null) {
            $queryParams['mayCreateNewVersion'] = $this->apiClient->getSerializer()->toQueryValue($may_create_new_version);
        }
        // query params
        if ($postback_url !== null) {
            $queryParams['postbackUrl'] = $this->apiClient->getSerializer()->toQueryValue($postback_url);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($import_request)) {
            $_tempBody = $import_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/courses/importJobs'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createUploadAndImportCourseJob
     *
     * 
     *
     * @param string $course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use. (required)
     * @param bool $may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)
     * @param string $postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)
     * @param \SplFileObject $file The zip file of the course contents to import. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     */
    public function createUploadAndImportCourseJob($course_id, $may_create_new_version = null, $postback_url = null, $file = null)
    {
        list($response) = $this->createUploadAndImportCourseJobWithHttpInfo($course_id, $may_create_new_version, $postback_url, $file);
        return $response;
    }

    /**
     * Operation createUploadAndImportCourseJobWithHttpInfo
     *
     * 
     *
     * @param string $course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use. (required)
     * @param bool $may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)
     * @param string $postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)
     * @param \SplFileObject $file The zip file of the course contents to import. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUploadAndImportCourseJobWithHttpInfo($course_id, $may_create_new_version = null, $postback_url = null, $file = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling createUploadAndImportCourseJob');
        }
        // parse inputs
        $resourcePath = "/courses/importJobs/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($may_create_new_version !== null) {
            $queryParams['mayCreateNewVersion'] = $this->apiClient->getSerializer()->toQueryValue($may_create_new_version);
        }
        // query params
        if ($postback_url !== null) {
            $queryParams['postbackUrl'] = $this->apiClient->getSerializer()->toQueryValue($postback_url);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/courses/importJobs/upload'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourse
     *
     * 
     *
     * @param string $course_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteCourse($course_id)
    {
        list($response) = $this->deleteCourseWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation deleteCourseWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling deleteCourse');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourseConfigurationSetting
     *
     * 
     *
     * @param string $course_id  (required)
     * @param string $setting_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteCourseConfigurationSetting($course_id, $setting_id)
    {
        list($response) = $this->deleteCourseConfigurationSettingWithHttpInfo($course_id, $setting_id);
        return $response;
    }

    /**
     * Operation deleteCourseConfigurationSettingWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param string $setting_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseConfigurationSettingWithHttpInfo($course_id, $setting_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling deleteCourseConfigurationSetting');
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $setting_id when calling deleteCourseConfigurationSetting');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/configuration/{settingId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                "{" . "settingId" . "}",
                $this->apiClient->getSerializer()->toPathValue($setting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/configuration/{settingId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourseTags
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteCourseTags($course_id, $tags)
    {
        list($response) = $this->deleteCourseTagsWithHttpInfo($course_id, $tags);
        return $response;
    }

    /**
     * Operation deleteCourseTagsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseTagsWithHttpInfo($course_id, $tags)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling deleteCourseTags');
        }
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling deleteCourseTags');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($tags)) {
            $_tempBody = $tags;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourseVersion
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteCourseVersion($course_id, $version_id)
    {
        list($response) = $this->deleteCourseVersionWithHttpInfo($course_id, $version_id);
        return $response;
    }

    /**
     * Operation deleteCourseVersionWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseVersionWithHttpInfo($course_id, $version_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling deleteCourseVersion');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling deleteCourseVersion');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/versions/{versionId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCourseVersionConfigurationSetting
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param string $setting_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteCourseVersionConfigurationSetting($course_id, $version_id, $setting_id)
    {
        list($response) = $this->deleteCourseVersionConfigurationSettingWithHttpInfo($course_id, $version_id, $setting_id);
        return $response;
    }

    /**
     * Operation deleteCourseVersionConfigurationSettingWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param string $setting_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCourseVersionConfigurationSettingWithHttpInfo($course_id, $version_id, $setting_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling deleteCourseVersionConfigurationSetting');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling deleteCourseVersionConfigurationSetting');
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $setting_id when calling deleteCourseVersionConfigurationSetting');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                "{" . "settingId" . "}",
                $this->apiClient->getSerializer()->toPathValue($setting_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/versions/{versionId}/configuration/{settingId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourse
     *
     * 
     *
     * @param string $course_id  (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\CourseSchema
     */
    public function getCourse($course_id, $include_registration_count = null, $include_course_metadata = null)
    {
        list($response) = $this->getCourseWithHttpInfo($course_id, $include_registration_count, $include_course_metadata);
        return $response;
    }

    /**
     * Operation getCourseWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\CourseSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseWithHttpInfo($course_id, $include_registration_count = null, $include_course_metadata = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourse');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // query params
        if ($include_course_metadata !== null) {
            $queryParams['includeCourseMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_course_metadata);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CourseSchema',
                '/courses/{courseId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CourseSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CourseSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseConfiguration
     *
     * 
     *
     * @param string $course_id  (required)
     * @param bool $include_metadata  (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\SettingListSchema
     */
    public function getCourseConfiguration($course_id, $include_metadata = null)
    {
        list($response) = $this->getCourseConfigurationWithHttpInfo($course_id, $include_metadata);
        return $response;
    }

    /**
     * Operation getCourseConfigurationWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param bool $include_metadata  (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\SettingListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseConfigurationWithHttpInfo($course_id, $include_metadata = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseConfiguration');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_metadata !== null) {
            $queryParams['includeMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_metadata);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\SettingListSchema',
                '/courses/{courseId}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseStatements
     *
     * 
     *
     * @param string $course_id  (required)
     * @param string $learner_id Only entries for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementResult
     */
    public function getCourseStatements($course_id, $learner_id = null, $since = null, $until = null, $more = null)
    {
        list($response) = $this->getCourseStatementsWithHttpInfo($course_id, $learner_id, $since, $until, $more);
        return $response;
    }

    /**
     * Operation getCourseStatementsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param string $learner_id Only entries for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiStatementResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseStatementsWithHttpInfo($course_id, $learner_id = null, $since = null, $until = null, $more = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseStatements');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/xAPIStatements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($learner_id !== null) {
            $queryParams['learnerId'] = $this->apiClient->getSerializer()->toQueryValue($learner_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult',
                '/courses/{courseId}/xAPIStatements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseTags
     *
     * 
     *
     * @param string $course_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\TagListSchema
     */
    public function getCourseTags($course_id)
    {
        list($response) = $this->getCourseTagsWithHttpInfo($course_id);
        return $response;
    }

    /**
     * Operation getCourseTagsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\TagListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseTagsWithHttpInfo($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseTags');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\TagListSchema',
                '/courses/{courseId}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\TagListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\TagListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseVersionConfiguration
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param bool $include_metadata  (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\SettingListSchema
     */
    public function getCourseVersionConfiguration($course_id, $version_id, $include_metadata = null)
    {
        list($response) = $this->getCourseVersionConfigurationWithHttpInfo($course_id, $version_id, $include_metadata);
        return $response;
    }

    /**
     * Operation getCourseVersionConfigurationWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param bool $include_metadata  (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\SettingListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseVersionConfigurationWithHttpInfo($course_id, $version_id, $include_metadata = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseVersionConfiguration');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling getCourseVersionConfiguration');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_metadata !== null) {
            $queryParams['includeMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_metadata);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\SettingListSchema',
                '/courses/{courseId}/versions/{versionId}/configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseVersionInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\CourseSchema
     */
    public function getCourseVersionInfo($course_id, $version_id, $include_registration_count = null, $include_course_metadata = null)
    {
        list($response) = $this->getCourseVersionInfoWithHttpInfo($course_id, $version_id, $include_registration_count, $include_course_metadata);
        return $response;
    }

    /**
     * Operation getCourseVersionInfoWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\CourseSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseVersionInfoWithHttpInfo($course_id, $version_id, $include_registration_count = null, $include_course_metadata = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseVersionInfo');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling getCourseVersionInfo');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // query params
        if ($include_course_metadata !== null) {
            $queryParams['includeCourseMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_course_metadata);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CourseSchema',
                '/courses/{courseId}/versions/{versionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CourseSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CourseSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseVersionStatements
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param string $learner_id Only entries for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementResult
     */
    public function getCourseVersionStatements($course_id, $version_id, $learner_id = null, $since = null, $until = null, $more = null)
    {
        list($response) = $this->getCourseVersionStatementsWithHttpInfo($course_id, $version_id, $learner_id, $since, $until, $more);
        return $response;
    }

    /**
     * Operation getCourseVersionStatementsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param string $learner_id Only entries for the specified learner id will be included. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiStatementResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseVersionStatementsWithHttpInfo($course_id, $version_id, $learner_id = null, $since = null, $until = null, $more = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseVersionStatements');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling getCourseVersionStatements');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($learner_id !== null) {
            $queryParams['learnerId'] = $this->apiClient->getSerializer()->toQueryValue($learner_id);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult',
                '/courses/{courseId}/versions/{versionId}/xAPIStatements'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourseVersions
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\CourseListNonPagedSchema
     */
    public function getCourseVersions($course_id, $since = null, $until = null, $include_registration_count = null, $include_course_metadata = null)
    {
        list($response) = $this->getCourseVersionsWithHttpInfo($course_id, $since, $until, $include_registration_count, $include_course_metadata);
        return $response;
    }

    /**
     * Operation getCourseVersionsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\CourseListNonPagedSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourseVersionsWithHttpInfo($course_id, $since = null, $until = null, $include_registration_count = null, $include_course_metadata = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling getCourseVersions');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // query params
        if ($include_course_metadata !== null) {
            $queryParams['includeCourseMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_course_metadata);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CourseListNonPagedSchema',
                '/courses/{courseId}/versions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CourseListNonPagedSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CourseListNonPagedSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourses
     *
     * 
     *
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $filter Optional string which filters results by a specified field (described by filterBy). (optional)
     * @param string $filter_by Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)
     * @param string $order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @param string[] $tags  (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\CourseListSchema
     */
    public function getCourses($more = null, $since = null, $until = null, $filter = null, $filter_by = null, $order_by = null, $include_registration_count = null, $include_course_metadata = null, $tags = null)
    {
        list($response) = $this->getCoursesWithHttpInfo($more, $since, $until, $filter, $filter_by, $order_by, $include_registration_count, $include_course_metadata, $tags);
        return $response;
    }

    /**
     * Operation getCoursesWithHttpInfo
     *
     * 
     *
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @param \DateTime $since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param \DateTime $until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $filter Optional string which filters results by a specified field (described by filterBy). (optional)
     * @param string $filter_by Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)
     * @param string $order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)
     * @param bool $include_registration_count Include the registration count in the results (optional, default to false)
     * @param bool $include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)
     * @param string[] $tags  (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\CourseListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCoursesWithHttpInfo($more = null, $since = null, $until = null, $filter = null, $filter_by = null, $order_by = null, $include_registration_count = null, $include_course_metadata = null, $tags = null)
    {
        // parse inputs
        $resourcePath = "/courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($filter_by !== null) {
            $queryParams['filterBy'] = $this->apiClient->getSerializer()->toQueryValue($filter_by);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($include_registration_count !== null) {
            $queryParams['includeRegistrationCount'] = $this->apiClient->getSerializer()->toQueryValue($include_registration_count);
        }
        // query params
        if ($include_course_metadata !== null) {
            $queryParams['includeCourseMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_course_metadata);
        }
        // query params
        if (is_array($tags)) {
            $tags = $this->apiClient->getSerializer()->serializeCollection($tags, 'csv', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = $this->apiClient->getSerializer()->toQueryValue($tags);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CourseListSchema',
                '/courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CourseListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CourseListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImportJobStatus
     *
     * 
     *
     * @param string $import_job_id Id received when the import job was submitted to the importJobs resource. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\ImportJobResultSchema
     */
    public function getImportJobStatus($import_job_id)
    {
        list($response) = $this->getImportJobStatusWithHttpInfo($import_job_id);
        return $response;
    }

    /**
     * Operation getImportJobStatusWithHttpInfo
     *
     * 
     *
     * @param string $import_job_id Id received when the import job was submitted to the importJobs resource. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\ImportJobResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobStatusWithHttpInfo($import_job_id)
    {
        // verify the required parameter 'import_job_id' is set
        if ($import_job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_job_id when calling getImportJobStatus');
        }
        // parse inputs
        $resourcePath = "/courses/importJobs/{importJobId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($import_job_id !== null) {
            $resourcePath = str_replace(
                "{" . "importJobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($import_job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\ImportJobResultSchema',
                '/courses/importJobs/{importJobId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\ImportJobResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\ImportJobResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCourseTags
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function putCourseTags($course_id, $tags)
    {
        list($response) = $this->putCourseTagsWithHttpInfo($course_id, $tags);
        return $response;
    }

    /**
     * Operation putCourseTagsWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TagListSchema $tags  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCourseTagsWithHttpInfo($course_id, $tags)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling putCourseTags');
        }
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling putCourseTags');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($tags)) {
            $_tempBody = $tags;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putCourseTagsBatch
     *
     * 
     *
     * @param \RusticiSoftware\Cloud\V2\Model\BatchTagsSchema $batch Object representing an array of ids to apply an array of tags to. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function putCourseTagsBatch($batch)
    {
        list($response) = $this->putCourseTagsBatchWithHttpInfo($batch);
        return $response;
    }

    /**
     * Operation putCourseTagsBatchWithHttpInfo
     *
     * 
     *
     * @param \RusticiSoftware\Cloud\V2\Model\BatchTagsSchema $batch Object representing an array of ids to apply an array of tags to. (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCourseTagsBatchWithHttpInfo($batch)
    {
        // verify the required parameter 'batch' is set
        if ($batch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $batch when calling putCourseTagsBatch');
        }
        // parse inputs
        $resourcePath = "/courses/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($batch)) {
            $_tempBody = $batch;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setCourseConfiguration
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function setCourseConfiguration($course_id, $configuration_settings)
    {
        list($response) = $this->setCourseConfigurationWithHttpInfo($course_id, $configuration_settings);
        return $response;
    }

    /**
     * Operation setCourseConfigurationWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCourseConfigurationWithHttpInfo($course_id, $configuration_settings)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling setCourseConfiguration');
        }
        // verify the required parameter 'configuration_settings' is set
        if ($configuration_settings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_settings when calling setCourseConfiguration');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_settings)) {
            $_tempBody = $configuration_settings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/configuration'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setCourseTitle
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TitleSchema $title  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function setCourseTitle($course_id, $title)
    {
        list($response) = $this->setCourseTitleWithHttpInfo($course_id, $title);
        return $response;
    }

    /**
     * Operation setCourseTitleWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\TitleSchema $title  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCourseTitleWithHttpInfo($course_id, $title)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling setCourseTitle');
        }
        // verify the required parameter 'title' is set
        if ($title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $title when calling setCourseTitle');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/title";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($title)) {
            $_tempBody = $title;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/title'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setCourseVersionConfiguration
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function setCourseVersionConfiguration($course_id, $version_id, $configuration_settings)
    {
        list($response) = $this->setCourseVersionConfigurationWithHttpInfo($course_id, $version_id, $configuration_settings);
        return $response;
    }

    /**
     * Operation setCourseVersionConfigurationWithHttpInfo
     *
     * 
     *
     * @param string $course_id  (required)
     * @param int $version_id The course version (required)
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCourseVersionConfigurationWithHttpInfo($course_id, $version_id, $configuration_settings)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling setCourseVersionConfiguration');
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $version_id when calling setCourseVersionConfiguration');
        }
        // verify the required parameter 'configuration_settings' is set
        if ($configuration_settings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_settings when calling setCourseVersionConfiguration');
        }
        // parse inputs
        $resourcePath = "/courses/{courseId}/versions/{versionId}/configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                "{" . "versionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($version_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_settings)) {
            $_tempBody = $configuration_settings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/courses/{courseId}/versions/{versionId}/configuration'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
