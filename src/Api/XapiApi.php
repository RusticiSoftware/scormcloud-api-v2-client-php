<?php
/**
 * XapiApi
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Api;

use \RusticiSoftware\Cloud\V2\ApiClient;
use \RusticiSoftware\Cloud\V2\ApiException;
use \RusticiSoftware\Cloud\V2\Configuration;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * XapiApi Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XapiApi
{
    /**
     * API Client
     *
     * @var \RusticiSoftware\Cloud\V2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RusticiSoftware\Cloud\V2\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RusticiSoftware\Cloud\V2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient $apiClient set the API client
     *
     * @return XapiApi
     */
    public function setApiClient(\RusticiSoftware\Cloud\V2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createStatementPipe
     *
     * Create an xAPI statement pipe.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\XapiStatementPipePostSchema $xapi_statement_pipe  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     */
    public function createStatementPipe($xapi_statement_pipe)
    {
        list($response) = $this->createStatementPipeWithHttpInfo($xapi_statement_pipe);
        return $response;
    }

    /**
     * Operation createStatementPipeWithHttpInfo
     *
     * Create an xAPI statement pipe.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\XapiStatementPipePostSchema $xapi_statement_pipe  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStatementPipeWithHttpInfo($xapi_statement_pipe)
    {
        // verify the required parameter 'xapi_statement_pipe' is set
        if ($xapi_statement_pipe === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_statement_pipe when calling createStatementPipe');
        }
        // parse inputs
        $resourcePath = "/xapi/statementPipes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($xapi_statement_pipe)) {
            $_tempBody = $xapi_statement_pipe;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/xapi/statementPipes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createXapiCredential
     *
     * Create a xAPI credential.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\XapiCredentialPostSchema $xapi_credential  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     */
    public function createXapiCredential($xapi_credential)
    {
        list($response) = $this->createXapiCredentialWithHttpInfo($xapi_credential);
        return $response;
    }

    /**
     * Operation createXapiCredentialWithHttpInfo
     *
     * Create a xAPI credential.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\XapiCredentialPostSchema $xapi_credential  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function createXapiCredentialWithHttpInfo($xapi_credential)
    {
        // verify the required parameter 'xapi_credential' is set
        if ($xapi_credential === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_credential when calling createXapiCredential');
        }
        // parse inputs
        $resourcePath = "/xapi/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($xapi_credential)) {
            $_tempBody = $xapi_credential;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/xapi/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteStatementPipe
     *
     * Deletes this xAPI pipe.
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteStatementPipe($statement_pipe_id)
    {
        list($response) = $this->deleteStatementPipeWithHttpInfo($statement_pipe_id);
        return $response;
    }

    /**
     * Operation deleteStatementPipeWithHttpInfo
     *
     * Deletes this xAPI pipe.
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStatementPipeWithHttpInfo($statement_pipe_id)
    {
        // verify the required parameter 'statement_pipe_id' is set
        if ($statement_pipe_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $statement_pipe_id when calling deleteStatementPipe');
        }
        // parse inputs
        $resourcePath = "/xapi/statementPipes/{statementPipeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($statement_pipe_id !== null) {
            $resourcePath = str_replace(
                "{" . "statementPipeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($statement_pipe_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/xapi/statementPipes/{statementPipeId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteXapiCredential
     *
     * Deletes the xAPI credentials specified by the xAPI credentials id
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function deleteXapiCredential($xapi_credential_id)
    {
        list($response) = $this->deleteXapiCredentialWithHttpInfo($xapi_credential_id);
        return $response;
    }

    /**
     * Operation deleteXapiCredentialWithHttpInfo
     *
     * Deletes the xAPI credentials specified by the xAPI credentials id
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteXapiCredentialWithHttpInfo($xapi_credential_id)
    {
        // verify the required parameter 'xapi_credential_id' is set
        if ($xapi_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_credential_id when calling deleteXapiCredential');
        }
        // parse inputs
        $resourcePath = "/xapi/credentials/{xapiCredentialId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($xapi_credential_id !== null) {
            $resourcePath = str_replace(
                "{" . "xapiCredentialId" . "}",
                $this->apiClient->getSerializer()->toPathValue($xapi_credential_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/xapi/credentials/{xapiCredentialId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStatementPipe
     *
     * Retrieves xAPI pipe for `xapiPipeId`
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementPipeSchema
     */
    public function getStatementPipe($statement_pipe_id)
    {
        list($response) = $this->getStatementPipeWithHttpInfo($statement_pipe_id);
        return $response;
    }

    /**
     * Operation getStatementPipeWithHttpInfo
     *
     * Retrieves xAPI pipe for `xapiPipeId`
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiStatementPipeSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatementPipeWithHttpInfo($statement_pipe_id)
    {
        // verify the required parameter 'statement_pipe_id' is set
        if ($statement_pipe_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $statement_pipe_id when calling getStatementPipe');
        }
        // parse inputs
        $resourcePath = "/xapi/statementPipes/{statementPipeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($statement_pipe_id !== null) {
            $resourcePath = str_replace(
                "{" . "statementPipeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($statement_pipe_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeSchema',
                '/xapi/statementPipes/{statementPipeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStatementPipes
     *
     * Get all of the xapiPipes for `appId`
     *
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiStatementPipeListSchema
     */
    public function getStatementPipes()
    {
        list($response) = $this->getStatementPipesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getStatementPipesWithHttpInfo
     *
     * Get all of the xapiPipes for `appId`
     *
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiStatementPipeListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatementPipesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/xapi/statementPipes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeListSchema',
                '/xapi/statementPipes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiStatementPipeListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getXapiCredential
     *
     * Retrieves the xAPI credentials specified by the xAPI credentials id.
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiCredentialSchema
     */
    public function getXapiCredential($xapi_credential_id)
    {
        list($response) = $this->getXapiCredentialWithHttpInfo($xapi_credential_id);
        return $response;
    }

    /**
     * Operation getXapiCredentialWithHttpInfo
     *
     * Retrieves the xAPI credentials specified by the xAPI credentials id.
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiCredentialSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getXapiCredentialWithHttpInfo($xapi_credential_id)
    {
        // verify the required parameter 'xapi_credential_id' is set
        if ($xapi_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_credential_id when calling getXapiCredential');
        }
        // parse inputs
        $resourcePath = "/xapi/credentials/{xapiCredentialId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($xapi_credential_id !== null) {
            $resourcePath = str_replace(
                "{" . "xapiCredentialId" . "}",
                $this->apiClient->getSerializer()->toPathValue($xapi_credential_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiCredentialSchema',
                '/xapi/credentials/{xapiCredentialId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiCredentialSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiCredentialSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getXapiCredentials
     *
     * Get the list of xapiCredentials
     *
     * @param \DateTime $since Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\XapiCredentialsListSchema
     */
    public function getXapiCredentials($since = null, $more = null)
    {
        list($response) = $this->getXapiCredentialsWithHttpInfo($since, $more);
        return $response;
    }

    /**
     * Operation getXapiCredentialsWithHttpInfo
     *
     * Get the list of xapiCredentials
     *
     * @param \DateTime $since Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)
     * @param string $more Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\XapiCredentialsListSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function getXapiCredentialsWithHttpInfo($since = null, $more = null)
    {
        // parse inputs
        $resourcePath = "/xapi/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($more !== null) {
            $queryParams['more'] = $this->apiClient->getSerializer()->toQueryValue($more);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\XapiCredentialsListSchema',
                '/xapi/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\XapiCredentialsListSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\XapiCredentialsListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setStatementPipe
     *
     * Edit an existing xAPI pipe or create a new one.
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @param \RusticiSoftware\Cloud\V2\Model\XapiStatementPipePutSchema $xapi_statement_pipe  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     */
    public function setStatementPipe($statement_pipe_id, $xapi_statement_pipe)
    {
        list($response) = $this->setStatementPipeWithHttpInfo($statement_pipe_id, $xapi_statement_pipe);
        return $response;
    }

    /**
     * Operation setStatementPipeWithHttpInfo
     *
     * Edit an existing xAPI pipe or create a new one.
     *
     * @param string $statement_pipe_id id for this xAPI statement pipe (required)
     * @param \RusticiSoftware\Cloud\V2\Model\XapiStatementPipePutSchema $xapi_statement_pipe  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function setStatementPipeWithHttpInfo($statement_pipe_id, $xapi_statement_pipe)
    {
        // verify the required parameter 'statement_pipe_id' is set
        if ($statement_pipe_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $statement_pipe_id when calling setStatementPipe');
        }
        // verify the required parameter 'xapi_statement_pipe' is set
        if ($xapi_statement_pipe === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_statement_pipe when calling setStatementPipe');
        }
        // parse inputs
        $resourcePath = "/xapi/statementPipes/{statementPipeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($statement_pipe_id !== null) {
            $resourcePath = str_replace(
                "{" . "statementPipeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($statement_pipe_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($xapi_statement_pipe)) {
            $_tempBody = $xapi_statement_pipe;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/xapi/statementPipes/{statementPipeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setXapiCredential
     *
     * Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @param \RusticiSoftware\Cloud\V2\Model\XapiCredentialPostSchema $xapi_credential  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return void
     */
    public function setXapiCredential($xapi_credential_id, $xapi_credential)
    {
        list($response) = $this->setXapiCredentialWithHttpInfo($xapi_credential_id, $xapi_credential);
        return $response;
    }

    /**
     * Operation setXapiCredentialWithHttpInfo
     *
     * Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
     *
     * @param string $xapi_credential_id id for this xAPI credential (required)
     * @param \RusticiSoftware\Cloud\V2\Model\XapiCredentialPostSchema $xapi_credential  (required)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setXapiCredentialWithHttpInfo($xapi_credential_id, $xapi_credential)
    {
        // verify the required parameter 'xapi_credential_id' is set
        if ($xapi_credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_credential_id when calling setXapiCredential');
        }
        // verify the required parameter 'xapi_credential' is set
        if ($xapi_credential === null) {
            throw new \InvalidArgumentException('Missing the required parameter $xapi_credential when calling setXapiCredential');
        }
        // parse inputs
        $resourcePath = "/xapi/credentials/{xapiCredentialId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($xapi_credential_id !== null) {
            $resourcePath = str_replace(
                "{" . "xapiCredentialId" . "}",
                $this->apiClient->getSerializer()->toPathValue($xapi_credential_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($xapi_credential)) {
            $_tempBody = $xapi_credential;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/xapi/credentials/{xapiCredentialId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
