<?php
/**
 * ApplicationManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Api;

use \RusticiSoftware\Cloud\V2\Configuration;
use \RusticiSoftware\Cloud\V2\ApiClient;
use \RusticiSoftware\Cloud\V2\ApiException;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * ApplicationManagementApi Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationManagementApi
{

    /**
     * API Client
     *
     * @var \RusticiSoftware\Cloud\V2\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RusticiSoftware\Cloud\V2\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://dev.cloud.scorm.com/api/v2/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RusticiSoftware\Cloud\V2\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RusticiSoftware\Cloud\V2\ApiClient $apiClient set the API client
     *
     * @return ApplicationManagementApi
     */
    public function setApiClient(\RusticiSoftware\Cloud\V2\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createApplication
     *
     * Create a new application
     *
     * @param string $application_name  (required)
     * @return \RusticiSoftware\Cloud\V2\Model\ApplicationSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createApplication($application_name)
    {
        list($response) = $this->createApplicationWithHttpInfo($application_name);
        return $response;
    }

    /**
     * Operation createApplicationWithHttpInfo
     *
     * Create a new application
     *
     * @param string $application_name  (required)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\ApplicationSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createApplicationWithHttpInfo($application_name)
    {
        // verify the required parameter 'application_name' is set
        if ($application_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_name when calling createApplication');
        }
        // parse inputs
        $resourcePath = "/appManagement/applications/{applicationName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($application_name !== null) {
            $resourcePath = str_replace(
                "{" . "applicationName" . "}",
                $this->apiClient->getSerializer()->toPathValue($application_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\ApplicationSchema',
                '/appManagement/applications/{applicationName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\ApplicationSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\ApplicationSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCredential
     *
     * Create credential
     *
     * @param string $child_app_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\CredentialRequestSchema $credential_request  (required)
     * @return \RusticiSoftware\Cloud\V2\Model\CredentialCreatedSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createCredential($child_app_id, $credential_request)
    {
        list($response) = $this->createCredentialWithHttpInfo($child_app_id, $credential_request);
        return $response;
    }

    /**
     * Operation createCredentialWithHttpInfo
     *
     * Create credential
     *
     * @param string $child_app_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\CredentialRequestSchema $credential_request  (required)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\CredentialCreatedSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createCredentialWithHttpInfo($child_app_id, $credential_request)
    {
        // verify the required parameter 'child_app_id' is set
        if ($child_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_app_id when calling createCredential');
        }
        // verify the required parameter 'credential_request' is set
        if ($credential_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credential_request when calling createCredential');
        }
        // parse inputs
        $resourcePath = "/appManagement/{childAppId}/credentials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($child_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "childAppId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($credential_request)) {
            $_tempBody = $credential_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CredentialCreatedSchema',
                '/appManagement/{childAppId}/credentials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CredentialCreatedSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CredentialCreatedSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createToken
     *
     * Create token
     *
     * @param \RusticiSoftware\Cloud\V2\Model\TokenRequestSchema $token_request  (required)
     * @return \RusticiSoftware\Cloud\V2\Model\StringResultSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createToken($token_request)
    {
        list($response) = $this->createTokenWithHttpInfo($token_request);
        return $response;
    }

    /**
     * Operation createTokenWithHttpInfo
     *
     * Create token
     *
     * @param \RusticiSoftware\Cloud\V2\Model\TokenRequestSchema $token_request  (required)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\StringResultSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function createTokenWithHttpInfo($token_request)
    {
        // verify the required parameter 'token_request' is set
        if ($token_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_request when calling createToken');
        }
        // parse inputs
        $resourcePath = "/appManagement/token";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($token_request)) {
            $_tempBody = $token_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\StringResultSchema',
                '/appManagement/token'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\StringResultSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteApplication
     *
     * Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
     *
     * @param string $child_app_id  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteApplication($child_app_id)
    {
        list($response) = $this->deleteApplicationWithHttpInfo($child_app_id);
        return $response;
    }

    /**
     * Operation deleteApplicationWithHttpInfo
     *
     * Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
     *
     * @param string $child_app_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteApplicationWithHttpInfo($child_app_id)
    {
        // verify the required parameter 'child_app_id' is set
        if ($child_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_app_id when calling deleteApplication');
        }
        // parse inputs
        $resourcePath = "/appManagement/applications/{childAppId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($child_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "childAppId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/appManagement/applications/{childAppId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCredential
     *
     * Removes `credentialId` credentials
     *
     * @param string $child_app_id  (required)
     * @param string $credential_id  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteCredential($child_app_id, $credential_id)
    {
        list($response) = $this->deleteCredentialWithHttpInfo($child_app_id, $credential_id);
        return $response;
    }

    /**
     * Operation deleteCredentialWithHttpInfo
     *
     * Removes `credentialId` credentials
     *
     * @param string $child_app_id  (required)
     * @param string $credential_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function deleteCredentialWithHttpInfo($child_app_id, $credential_id)
    {
        // verify the required parameter 'child_app_id' is set
        if ($child_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_app_id when calling deleteCredential');
        }
        // verify the required parameter 'credential_id' is set
        if ($credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credential_id when calling deleteCredential');
        }
        // parse inputs
        $resourcePath = "/appManagement/{childAppId}/credentials/{credentialId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($child_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "childAppId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_app_id),
                $resourcePath
            );
        }
        // path params
        if ($credential_id !== null) {
            $resourcePath = str_replace(
                "{" . "credentialId" . "}",
                $this->apiClient->getSerializer()->toPathValue($credential_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/appManagement/{childAppId}/credentials/{credentialId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getApplicationConfiguration
     *
     * Returns all configuration settings for this level
     *
     * @param string $learning_standard If specified, the request will be scoped to the provided learning standard. (optional)
     * @param bool $single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)
     * @param bool $include_metadata  (optional, default to false)
     * @return \RusticiSoftware\Cloud\V2\Model\SettingListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getApplicationConfiguration($learning_standard = null, $single_sco = null, $include_metadata = null)
    {
        list($response) = $this->getApplicationConfigurationWithHttpInfo($learning_standard, $single_sco, $include_metadata);
        return $response;
    }

    /**
     * Operation getApplicationConfigurationWithHttpInfo
     *
     * Returns all configuration settings for this level
     *
     * @param string $learning_standard If specified, the request will be scoped to the provided learning standard. (optional)
     * @param bool $single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)
     * @param bool $include_metadata  (optional, default to false)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\SettingListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getApplicationConfigurationWithHttpInfo($learning_standard = null, $single_sco = null, $include_metadata = null)
    {
        // parse inputs
        $resourcePath = "/appManagement/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($learning_standard !== null) {
            $queryParams['learningStandard'] = $this->apiClient->getSerializer()->toQueryValue($learning_standard);
        }
        // query params
        if ($single_sco !== null) {
            $queryParams['singleSco'] = $this->apiClient->getSerializer()->toQueryValue($single_sco);
        }
        // query params
        if ($include_metadata !== null) {
            $queryParams['includeMetadata'] = $this->apiClient->getSerializer()->toQueryValue($include_metadata);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\SettingListSchema',
                '/appManagement/configuration'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\SettingListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getApplicationList
     *
     * Get list of all applications in this realm.
     *
     * @return \RusticiSoftware\Cloud\V2\Model\ApplicationListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getApplicationList()
    {
        list($response) = $this->getApplicationListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getApplicationListWithHttpInfo
     *
     * Get list of all applications in this realm.
     *
     * @return Array of \RusticiSoftware\Cloud\V2\Model\ApplicationListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getApplicationListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/appManagement/applications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\ApplicationListSchema',
                '/appManagement/applications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\ApplicationListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\ApplicationListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCredentials
     *
     * List of credentials
     *
     * @param string $child_app_id  (required)
     * @return \RusticiSoftware\Cloud\V2\Model\CredentialListSchema
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getCredentials($child_app_id)
    {
        list($response) = $this->getCredentialsWithHttpInfo($child_app_id);
        return $response;
    }

    /**
     * Operation getCredentialsWithHttpInfo
     *
     * List of credentials
     *
     * @param string $child_app_id  (required)
     * @return Array of \RusticiSoftware\Cloud\V2\Model\CredentialListSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function getCredentialsWithHttpInfo($child_app_id)
    {
        // verify the required parameter 'child_app_id' is set
        if ($child_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_app_id when calling getCredentials');
        }
        // parse inputs
        $resourcePath = "/appManagement/{childAppId}/credentials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($child_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "childAppId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_app_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RusticiSoftware\Cloud\V2\Model\CredentialListSchema',
                '/appManagement/{childAppId}/credentials'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\RusticiSoftware\Cloud\V2\Model\CredentialListSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\CredentialListSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setApplicationConfiguration
     *
     * Set configuration settings for this level.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @param string $learning_standard If specified, the request will be scoped to the provided learning standard. (optional)
     * @param bool $single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setApplicationConfiguration($configuration_settings, $learning_standard = null, $single_sco = null)
    {
        list($response) = $this->setApplicationConfigurationWithHttpInfo($configuration_settings, $learning_standard, $single_sco);
        return $response;
    }

    /**
     * Operation setApplicationConfigurationWithHttpInfo
     *
     * Set configuration settings for this level.
     *
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $configuration_settings  (required)
     * @param string $learning_standard If specified, the request will be scoped to the provided learning standard. (optional)
     * @param bool $single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function setApplicationConfigurationWithHttpInfo($configuration_settings, $learning_standard = null, $single_sco = null)
    {
        // verify the required parameter 'configuration_settings' is set
        if ($configuration_settings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $configuration_settings when calling setApplicationConfiguration');
        }
        // parse inputs
        $resourcePath = "/appManagement/configuration";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($learning_standard !== null) {
            $queryParams['learningStandard'] = $this->apiClient->getSerializer()->toQueryValue($learning_standard);
        }
        // query params
        if ($single_sco !== null) {
            $queryParams['singleSco'] = $this->apiClient->getSerializer()->toQueryValue($single_sco);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($configuration_settings)) {
            $_tempBody = $configuration_settings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/appManagement/configuration'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCredential
     *
     * Update the name or status associated with `credentialId`
     *
     * @param string $child_app_id  (required)
     * @param string $credential_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\CredentialRequestSchema $credential_update  (required)
     * @return void
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function updateCredential($child_app_id, $credential_id, $credential_update)
    {
        list($response) = $this->updateCredentialWithHttpInfo($child_app_id, $credential_id, $credential_update);
        return $response;
    }

    /**
     * Operation updateCredentialWithHttpInfo
     *
     * Update the name or status associated with `credentialId`
     *
     * @param string $child_app_id  (required)
     * @param string $credential_id  (required)
     * @param \RusticiSoftware\Cloud\V2\Model\CredentialRequestSchema $credential_update  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \RusticiSoftware\Cloud\V2\ApiException on non-2xx response
     */
    public function updateCredentialWithHttpInfo($child_app_id, $credential_id, $credential_update)
    {
        // verify the required parameter 'child_app_id' is set
        if ($child_app_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_app_id when calling updateCredential');
        }
        // verify the required parameter 'credential_id' is set
        if ($credential_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credential_id when calling updateCredential');
        }
        // verify the required parameter 'credential_update' is set
        if ($credential_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credential_update when calling updateCredential');
        }
        // parse inputs
        $resourcePath = "/appManagement/{childAppId}/credentials/{credentialId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($child_app_id !== null) {
            $resourcePath = str_replace(
                "{" . "childAppId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_app_id),
                $resourcePath
            );
        }
        // path params
        if ($credential_id !== null) {
            $resourcePath = str_replace(
                "{" . "credentialId" . "}",
                $this->apiClient->getSerializer()->toPathValue($credential_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($credential_update)) {
            $_tempBody = $credential_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/appManagement/{childAppId}/credentials/{credentialId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RusticiSoftware\Cloud\V2\Model\MessageSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
