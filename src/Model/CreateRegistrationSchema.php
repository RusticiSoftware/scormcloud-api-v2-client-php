<?php
/**
 * CreateRegistrationSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * CreateRegistrationSchema Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateRegistrationSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateRegistrationSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'course_id' => 'string',
        'learner' => '\RusticiSoftware\Cloud\V2\Model\LearnerSchema',
        'registration_id' => 'string',
        'xapi_registration_id' => 'string',
        'learner_tags' => 'string[]',
        'course_tags' => 'string[]',
        'registration_tags' => 'string[]',
        'post_back' => '\RusticiSoftware\Cloud\V2\Model\PostBackSchema',
        'initial_registration_state' => '\RusticiSoftware\Cloud\V2\Model\RegistrationSchema',
        'initial_settings' => '\RusticiSoftware\Cloud\V2\Model\SettingsPostSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'course_id' => null,
        'learner' => null,
        'registration_id' => null,
        'xapi_registration_id' => null,
        'learner_tags' => null,
        'course_tags' => null,
        'registration_tags' => null,
        'post_back' => null,
        'initial_registration_state' => null,
        'initial_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'course_id' => 'courseId',
        'learner' => 'learner',
        'registration_id' => 'registrationId',
        'xapi_registration_id' => 'xapiRegistrationId',
        'learner_tags' => 'learnerTags',
        'course_tags' => 'courseTags',
        'registration_tags' => 'registrationTags',
        'post_back' => 'postBack',
        'initial_registration_state' => 'initialRegistrationState',
        'initial_settings' => 'initialSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'course_id' => 'setCourseId',
        'learner' => 'setLearner',
        'registration_id' => 'setRegistrationId',
        'xapi_registration_id' => 'setXapiRegistrationId',
        'learner_tags' => 'setLearnerTags',
        'course_tags' => 'setCourseTags',
        'registration_tags' => 'setRegistrationTags',
        'post_back' => 'setPostBack',
        'initial_registration_state' => 'setInitialRegistrationState',
        'initial_settings' => 'setInitialSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'course_id' => 'getCourseId',
        'learner' => 'getLearner',
        'registration_id' => 'getRegistrationId',
        'xapi_registration_id' => 'getXapiRegistrationId',
        'learner_tags' => 'getLearnerTags',
        'course_tags' => 'getCourseTags',
        'registration_tags' => 'getRegistrationTags',
        'post_back' => 'getPostBack',
        'initial_registration_state' => 'getInitialRegistrationState',
        'initial_settings' => 'getInitialSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['course_id'] = isset($data['course_id']) ? $data['course_id'] : null;
        $this->container['learner'] = isset($data['learner']) ? $data['learner'] : null;
        $this->container['registration_id'] = isset($data['registration_id']) ? $data['registration_id'] : null;
        $this->container['xapi_registration_id'] = isset($data['xapi_registration_id']) ? $data['xapi_registration_id'] : null;
        $this->container['learner_tags'] = isset($data['learner_tags']) ? $data['learner_tags'] : null;
        $this->container['course_tags'] = isset($data['course_tags']) ? $data['course_tags'] : null;
        $this->container['registration_tags'] = isset($data['registration_tags']) ? $data['registration_tags'] : null;
        $this->container['post_back'] = isset($data['post_back']) ? $data['post_back'] : null;
        $this->container['initial_registration_state'] = isset($data['initial_registration_state']) ? $data['initial_registration_state'] : null;
        $this->container['initial_settings'] = isset($data['initial_settings']) ? $data['initial_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['course_id'] === null) {
            $invalidProperties[] = "'course_id' can't be null";
        }
        if ($this->container['learner'] === null) {
            $invalidProperties[] = "'learner' can't be null";
        }
        if ($this->container['registration_id'] === null) {
            $invalidProperties[] = "'registration_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets course_id
     *
     * @return string
     */
    public function getCourseId()
    {
        return $this->container['course_id'];
    }

    /**
     * Sets course_id
     *
     * @param string $course_id course_id
     *
     * @return $this
     */
    public function setCourseId($course_id)
    {
        $this->container['course_id'] = $course_id;

        return $this;
    }

    /**
     * Gets learner
     *
     * @return \RusticiSoftware\Cloud\V2\Model\LearnerSchema
     */
    public function getLearner()
    {
        return $this->container['learner'];
    }

    /**
     * Sets learner
     *
     * @param \RusticiSoftware\Cloud\V2\Model\LearnerSchema $learner learner
     *
     * @return $this
     */
    public function setLearner($learner)
    {
        $this->container['learner'] = $learner;

        return $this;
    }

    /**
     * Gets registration_id
     *
     * @return string
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param string $registration_id registration_id
     *
     * @return $this
     */
    public function setRegistrationId($registration_id)
    {
        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets xapi_registration_id
     *
     * @return string
     */
    public function getXapiRegistrationId()
    {
        return $this->container['xapi_registration_id'];
    }

    /**
     * Sets xapi_registration_id
     *
     * @param string $xapi_registration_id The xapiRegistrationId to be associated with this registration. If not specified, the system will assign an xapiRegistrationId. As per the xApi specification, this must be a UUID.
     *
     * @return $this
     */
    public function setXapiRegistrationId($xapi_registration_id)
    {
        $this->container['xapi_registration_id'] = $xapi_registration_id;

        return $this;
    }

    /**
     * Gets learner_tags
     *
     * @return string[]
     */
    public function getLearnerTags()
    {
        return $this->container['learner_tags'];
    }

    /**
     * Sets learner_tags
     *
     * @param string[] $learner_tags learner_tags
     *
     * @return $this
     */
    public function setLearnerTags($learner_tags)
    {
        $this->container['learner_tags'] = $learner_tags;

        return $this;
    }

    /**
     * Gets course_tags
     *
     * @return string[]
     */
    public function getCourseTags()
    {
        return $this->container['course_tags'];
    }

    /**
     * Sets course_tags
     *
     * @param string[] $course_tags course_tags
     *
     * @return $this
     */
    public function setCourseTags($course_tags)
    {
        $this->container['course_tags'] = $course_tags;

        return $this;
    }

    /**
     * Gets registration_tags
     *
     * @return string[]
     */
    public function getRegistrationTags()
    {
        return $this->container['registration_tags'];
    }

    /**
     * Sets registration_tags
     *
     * @param string[] $registration_tags registration_tags
     *
     * @return $this
     */
    public function setRegistrationTags($registration_tags)
    {
        $this->container['registration_tags'] = $registration_tags;

        return $this;
    }

    /**
     * Gets post_back
     *
     * @return \RusticiSoftware\Cloud\V2\Model\PostBackSchema
     */
    public function getPostBack()
    {
        return $this->container['post_back'];
    }

    /**
     * Sets post_back
     *
     * @param \RusticiSoftware\Cloud\V2\Model\PostBackSchema $post_back Specifies an optional override URL for which to post activity and status data in real time as the course is completed. By default all of these settings are read from your configuration.
     *
     * @return $this
     */
    public function setPostBack($post_back)
    {
        $this->container['post_back'] = $post_back;

        return $this;
    }

    /**
     * Gets initial_registration_state
     *
     * @return \RusticiSoftware\Cloud\V2\Model\RegistrationSchema
     */
    public function getInitialRegistrationState()
    {
        return $this->container['initial_registration_state'];
    }

    /**
     * Sets initial_registration_state
     *
     * @param \RusticiSoftware\Cloud\V2\Model\RegistrationSchema $initial_registration_state initial_registration_state
     *
     * @return $this
     */
    public function setInitialRegistrationState($initial_registration_state)
    {
        $this->container['initial_registration_state'] = $initial_registration_state;

        return $this;
    }

    /**
     * Gets initial_settings
     *
     * @return \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema
     */
    public function getInitialSettings()
    {
        return $this->container['initial_settings'];
    }

    /**
     * Sets initial_settings
     *
     * @param \RusticiSoftware\Cloud\V2\Model\SettingsPostSchema $initial_settings initial_settings
     *
     * @return $this
     */
    public function setInitialSettings($initial_settings)
    {
        $this->container['initial_settings'] = $initial_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


