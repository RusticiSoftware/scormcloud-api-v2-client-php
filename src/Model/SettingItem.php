<?php
/**
 * SettingItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;

/**
 * SettingItem Class Doc Comment
 *
 * @category    Class
 * @package     RusticiSoftware\Cloud\V2
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SettingItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SettingItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'effective_value' => 'string',
        'effective_value_source' => 'string',
        'explicit_value' => 'string',
        'metadata' => '\RusticiSoftware\Cloud\V2\Model\SettingMetadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'effective_value' => 'effectiveValue',
        'effective_value_source' => 'effectiveValueSource',
        'explicit_value' => 'explicitValue',
        'metadata' => 'metadata'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'effective_value' => 'setEffectiveValue',
        'effective_value_source' => 'setEffectiveValueSource',
        'explicit_value' => 'setExplicitValue',
        'metadata' => 'setMetadata'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'effective_value' => 'getEffectiveValue',
        'effective_value_source' => 'getEffectiveValueSource',
        'explicit_value' => 'getExplicitValue',
        'metadata' => 'getMetadata'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EFFECTIVE_VALUE_SOURCE_DEFAULT = 'default';
    const EFFECTIVE_VALUE_SOURCE_APPLICATION = 'application';
    const EFFECTIVE_VALUE_SOURCE_LEARNING_STANDARD_FOR_APPLICATION = 'learningStandardForApplication';
    const EFFECTIVE_VALUE_SOURCE_DISPATCH_DESTINATION = 'dispatchDestination';
    const EFFECTIVE_VALUE_SOURCE_COURSE = 'course';
    const EFFECTIVE_VALUE_SOURCE_DISPATCH = 'dispatch';
    const EFFECTIVE_VALUE_SOURCE_REGISTRATION = 'registration';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEffectiveValueSourceAllowableValues()
    {
        return [
            self::EFFECTIVE_VALUE_SOURCE_DEFAULT,
            self::EFFECTIVE_VALUE_SOURCE_APPLICATION,
            self::EFFECTIVE_VALUE_SOURCE_LEARNING_STANDARD_FOR_APPLICATION,
            self::EFFECTIVE_VALUE_SOURCE_DISPATCH_DESTINATION,
            self::EFFECTIVE_VALUE_SOURCE_COURSE,
            self::EFFECTIVE_VALUE_SOURCE_DISPATCH,
            self::EFFECTIVE_VALUE_SOURCE_REGISTRATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['effective_value'] = isset($data['effective_value']) ? $data['effective_value'] : null;
        $this->container['effective_value_source'] = isset($data['effective_value_source']) ? $data['effective_value_source'] : null;
        $this->container['explicit_value'] = isset($data['explicit_value']) ? $data['explicit_value'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["default", "application", "learningStandardForApplication", "dispatchDestination", "course", "dispatch", "registration"];
        if (!in_array($this->container['effective_value_source'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'effective_value_source', must be one of 'default', 'application', 'learningStandardForApplication', 'dispatchDestination', 'course', 'dispatch', 'registration'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["default", "application", "learningStandardForApplication", "dispatchDestination", "course", "dispatch", "registration"];
        if (!in_array($this->container['effective_value_source'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets effective_value
     * @return string
     */
    public function getEffectiveValue()
    {
        return $this->container['effective_value'];
    }

    /**
     * Sets effective_value
     * @param string $effective_value The value of this setting that would be used if read at this level, including defaults, fallback, and values set at less specific levels.
     * @return $this
     */
    public function setEffectiveValue($effective_value)
    {
        $this->container['effective_value'] = $effective_value;

        return $this;
    }

    /**
     * Gets effective_value_source
     * @return string
     */
    public function getEffectiveValueSource()
    {
        return $this->container['effective_value_source'];
    }

    /**
     * Sets effective_value_source
     * @param string $effective_value_source The source of this effective value, default, fallback, or the level the value was set at.
     * @return $this
     */
    public function setEffectiveValueSource($effective_value_source)
    {
        $allowed_values = array('default', 'application', 'learningStandardForApplication', 'dispatchDestination', 'course', 'dispatch', 'registration');
        if (!is_null($effective_value_source) && (!in_array($effective_value_source, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'effective_value_source', must be one of 'default', 'application', 'learningStandardForApplication', 'dispatchDestination', 'course', 'dispatch', 'registration'");
        }
        $this->container['effective_value_source'] = $effective_value_source;

        return $this;
    }

    /**
     * Gets explicit_value
     * @return string
     */
    public function getExplicitValue()
    {
        return $this->container['explicit_value'];
    }

    /**
     * Sets explicit_value
     * @param string $explicit_value The value of this setting that is explicitly set at this level. If not present, the setting is not specified at this level.
     * @return $this
     */
    public function setExplicitValue($explicit_value)
    {
        $this->container['explicit_value'] = $explicit_value;

        return $this;
    }

    /**
     * Gets metadata
     * @return \RusticiSoftware\Cloud\V2\Model\SettingMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     * @param \RusticiSoftware\Cloud\V2\Model\SettingMetadata $metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


