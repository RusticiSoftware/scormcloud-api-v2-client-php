<?php
/**
 * SettingMetadata
 *
 * PHP version 7
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * SettingMetadata Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettingMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettingMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default' => 'string',
        'data_type' => 'string',
        'setting_description' => 'string',
        'level' => 'string',
        'learning_standards' => 'string[]',
        'learning_standard_variant' => 'string',
        'fallback' => 'string',
        'valid_values' => '\RusticiSoftware\Cloud\V2\Model\SettingValidValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default' => null,
        'data_type' => null,
        'setting_description' => null,
        'level' => null,
        'learning_standards' => null,
        'learning_standard_variant' => null,
        'fallback' => null,
        'valid_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default' => 'default',
        'data_type' => 'dataType',
        'setting_description' => 'settingDescription',
        'level' => 'level',
        'learning_standards' => 'learningStandards',
        'learning_standard_variant' => 'learningStandardVariant',
        'fallback' => 'fallback',
        'valid_values' => 'validValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default' => 'setDefault',
        'data_type' => 'setDataType',
        'setting_description' => 'setSettingDescription',
        'level' => 'setLevel',
        'learning_standards' => 'setLearningStandards',
        'learning_standard_variant' => 'setLearningStandardVariant',
        'fallback' => 'setFallback',
        'valid_values' => 'setValidValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default' => 'getDefault',
        'data_type' => 'getDataType',
        'setting_description' => 'getSettingDescription',
        'level' => 'getLevel',
        'learning_standards' => 'getLearningStandards',
        'learning_standard_variant' => 'getLearningStandardVariant',
        'fallback' => 'getFallback',
        'valid_values' => 'getValidValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LEARNING_STANDARD_VARIANT_SINGLE_SCO_ONLY = 'singleScoOnly';
    const LEARNING_STANDARD_VARIANT_MULTI_SCO_ONLY = 'multiScoOnly';
    const LEARNING_STANDARD_VARIANT_EITHER = 'either';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLearningStandardVariantAllowableValues()
    {
        return [
            self::LEARNING_STANDARD_VARIANT_SINGLE_SCO_ONLY,
            self::LEARNING_STANDARD_VARIANT_MULTI_SCO_ONLY,
            self::LEARNING_STANDARD_VARIANT_EITHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['setting_description'] = isset($data['setting_description']) ? $data['setting_description'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['learning_standards'] = isset($data['learning_standards']) ? $data['learning_standards'] : null;
        $this->container['learning_standard_variant'] = isset($data['learning_standard_variant']) ? $data['learning_standard_variant'] : 'either';
        $this->container['fallback'] = isset($data['fallback']) ? $data['fallback'] : null;
        $this->container['valid_values'] = isset($data['valid_values']) ? $data['valid_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default
     *
     * @return string
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string $default Default value of this setting
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type The data type of this setting
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets setting_description
     *
     * @return string
     */
    public function getSettingDescription()
    {
        return $this->container['setting_description'];
    }

    /**
     * Sets setting_description
     *
     * @param string $setting_description description of this setting
     *
     * @return $this
     */
    public function setSettingDescription($setting_description)
    {
        $this->container['setting_description'] = $setting_description;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level The level this setting will be applied at, which limits where it can be set. For example, WebPathToContentRoot is applied at the application level, so it's not valid to set it for a registration.
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets learning_standards
     *
     * @return string[]
     */
    public function getLearningStandards()
    {
        return $this->container['learning_standards'];
    }

    /**
     * Sets learning_standards
     *
     * @param string[] $learning_standards The list of learning standards this setting applies to. If not present, this setting is not limited to certain learning standards.
     *
     * @return $this
     */
    public function setLearningStandards($learning_standards)
    {
        $this->container['learning_standards'] = $learning_standards;

        return $this;
    }

    /**
     * Gets learning_standard_variant
     *
     * @return string
     */
    public function getLearningStandardVariant()
    {
        return $this->container['learning_standard_variant'];
    }

    /**
     * Sets learning_standard_variant
     *
     * @param string $learning_standard_variant Does this setting apply to only single-SCO packages, only multi-SCO, or either?
     *
     * @return $this
     */
    public function setLearningStandardVariant($learning_standard_variant)
    {
        $this->container['learning_standard_variant'] = $learning_standard_variant;

        return $this;
    }

    /**
     * Gets fallback
     *
     * @return string
     */
    public function getFallback()
    {
        return $this->container['fallback'];
    }

    /**
     * Sets fallback
     *
     * @param string $fallback A setting that will be used instead of this setting if no value is provided for this setting (This is similar to a default, except that the the value of another setting is being used instead of a fixed default value).
     *
     * @return $this
     */
    public function setFallback($fallback)
    {
        $this->container['fallback'] = $fallback;

        return $this;
    }

    /**
     * Gets valid_values
     *
     * @return \RusticiSoftware\Cloud\V2\Model\SettingValidValue[]
     */
    public function getValidValues()
    {
        return $this->container['valid_values'];
    }

    /**
     * Sets valid_values
     *
     * @param \RusticiSoftware\Cloud\V2\Model\SettingValidValue[] $valid_values For settings with a fixed list of valid values, the list of those values
     *
     * @return $this
     */
    public function setValidValues($valid_values)
    {
        $this->container['valid_values'] = $valid_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


