<?php
/**
 * RefreshConnectorResultSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * RefreshConnectorResultSchema Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RefreshConnectorResultSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RefreshConnectorResultSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connector_id' => 'string',
        'connector_plugin_name' => 'string',
        'refresh_status' => 'string',
        'updated_items' => 'int',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connector_id' => null,
        'connector_plugin_name' => null,
        'refresh_status' => null,
        'updated_items' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connector_id' => 'connectorId',
        'connector_plugin_name' => 'connectorPluginName',
        'refresh_status' => 'refreshStatus',
        'updated_items' => 'updatedItems',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connector_id' => 'setConnectorId',
        'connector_plugin_name' => 'setConnectorPluginName',
        'refresh_status' => 'setRefreshStatus',
        'updated_items' => 'setUpdatedItems',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connector_id' => 'getConnectorId',
        'connector_plugin_name' => 'getConnectorPluginName',
        'refresh_status' => 'getRefreshStatus',
        'updated_items' => 'getUpdatedItems',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REFRESH_STATUS_SUBMITTED = 'SUBMITTED';
    const REFRESH_STATUS_RUNNING = 'RUNNING';
    const REFRESH_STATUS_COMPLETE = 'COMPLETE';
    const REFRESH_STATUS_ERROR = 'ERROR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefreshStatusAllowableValues()
    {
        return [
            self::REFRESH_STATUS_SUBMITTED,
            self::REFRESH_STATUS_RUNNING,
            self::REFRESH_STATUS_COMPLETE,
            self::REFRESH_STATUS_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connector_id'] = isset($data['connector_id']) ? $data['connector_id'] : null;
        $this->container['connector_plugin_name'] = isset($data['connector_plugin_name']) ? $data['connector_plugin_name'] : null;
        $this->container['refresh_status'] = isset($data['refresh_status']) ? $data['refresh_status'] : null;
        $this->container['updated_items'] = isset($data['updated_items']) ? $data['updated_items'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRefreshStatusAllowableValues();
        if (!is_null($this->container['refresh_status']) && !in_array($this->container['refresh_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'refresh_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connector_id
     *
     * @return string
     */
    public function getConnectorId()
    {
        return $this->container['connector_id'];
    }

    /**
     * Sets connector_id
     *
     * @param string $connector_id connector_id
     *
     * @return $this
     */
    public function setConnectorId($connector_id)
    {
        $this->container['connector_id'] = $connector_id;

        return $this;
    }

    /**
     * Gets connector_plugin_name
     *
     * @return string
     */
    public function getConnectorPluginName()
    {
        return $this->container['connector_plugin_name'];
    }

    /**
     * Sets connector_plugin_name
     *
     * @param string $connector_plugin_name connector_plugin_name
     *
     * @return $this
     */
    public function setConnectorPluginName($connector_plugin_name)
    {
        $this->container['connector_plugin_name'] = $connector_plugin_name;

        return $this;
    }

    /**
     * Gets refresh_status
     *
     * @return string
     */
    public function getRefreshStatus()
    {
        return $this->container['refresh_status'];
    }

    /**
     * Sets refresh_status
     *
     * @param string $refresh_status refresh_status
     *
     * @return $this
     */
    public function setRefreshStatus($refresh_status)
    {
        $allowedValues = $this->getRefreshStatusAllowableValues();
        if (!is_null($refresh_status) && !in_array($refresh_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'refresh_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refresh_status'] = $refresh_status;

        return $this;
    }

    /**
     * Gets updated_items
     *
     * @return int
     */
    public function getUpdatedItems()
    {
        return $this->container['updated_items'];
    }

    /**
     * Sets updated_items
     *
     * @param int $updated_items updated_items
     *
     * @return $this
     */
    public function setUpdatedItems($updated_items)
    {
        $this->container['updated_items'] = $updated_items;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


