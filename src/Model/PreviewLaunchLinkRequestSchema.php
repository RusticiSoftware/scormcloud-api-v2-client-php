<?php
/**
 * PreviewLaunchLinkRequestSchema
 *
 * PHP version 7
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * PreviewLaunchLinkRequestSchema Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreviewLaunchLinkRequestSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreviewLaunchLinkRequestSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expiry' => 'int',
        'redirect_on_exit_url' => 'string',
        'start_sco' => 'string',
        'culture' => 'string',
        'css_url' => 'string',
        'additionalvalues' => '\RusticiSoftware\Cloud\V2\Model\ItemValuePairSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expiry' => 'int32',
        'redirect_on_exit_url' => null,
        'start_sco' => null,
        'culture' => null,
        'css_url' => null,
        'additionalvalues' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiry' => 'expiry',
        'redirect_on_exit_url' => 'redirectOnExitUrl',
        'start_sco' => 'startSco',
        'culture' => 'culture',
        'css_url' => 'cssUrl',
        'additionalvalues' => 'additionalvalues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expiry' => 'setExpiry',
        'redirect_on_exit_url' => 'setRedirectOnExitUrl',
        'start_sco' => 'setStartSco',
        'culture' => 'setCulture',
        'css_url' => 'setCssUrl',
        'additionalvalues' => 'setAdditionalvalues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expiry' => 'getExpiry',
        'redirect_on_exit_url' => 'getRedirectOnExitUrl',
        'start_sco' => 'getStartSco',
        'culture' => 'getCulture',
        'css_url' => 'getCssUrl',
        'additionalvalues' => 'getAdditionalvalues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : 120;
        $this->container['redirect_on_exit_url'] = isset($data['redirect_on_exit_url']) ? $data['redirect_on_exit_url'] : null;
        $this->container['start_sco'] = isset($data['start_sco']) ? $data['start_sco'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['css_url'] = isset($data['css_url']) ? $data['css_url'] : null;
        $this->container['additionalvalues'] = isset($data['additionalvalues']) ? $data['additionalvalues'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expiry
     *
     * @return int
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param int $expiry Number of seconds from now this link will expire in. Defaults to 120s. Range 10s:300s
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets redirect_on_exit_url
     *
     * @return string
     */
    public function getRedirectOnExitUrl()
    {
        return $this->container['redirect_on_exit_url'];
    }

    /**
     * Sets redirect_on_exit_url
     *
     * @param string $redirect_on_exit_url The URL the application should redirect to when the learner exits a course.  Alternatively one of the following keywords can be used to redirect to: - `closer` - A page that automatically tries to close the browser tab/window - `blank` - A blank page - `message` - A page with a message about the course being complete  If an empty string is specified, the configured setting will be used (default www.scorm.com). If an invalid url is specified, the Message.html page will be loaded.
     *
     * @return $this
     */
    public function setRedirectOnExitUrl($redirect_on_exit_url)
    {
        $this->container['redirect_on_exit_url'] = $redirect_on_exit_url;

        return $this;
    }

    /**
     * Gets start_sco
     *
     * @return string
     */
    public function getStartSco()
    {
        return $this->container['start_sco'];
    }

    /**
     * Sets start_sco
     *
     * @param string $start_sco For SCORM, SCO identifier to override launch, overriding the normal sequencing.
     *
     * @return $this
     */
    public function setStartSco($start_sco)
    {
        $this->container['start_sco'] = $start_sco;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture This parameter should specify a culture code. If specified, and supported, the navigation and alerts in the player will be displayed in the associated language. If not specified, the locale of the userâ€™s browser will be used.
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets css_url
     *
     * @return string
     */
    public function getCssUrl()
    {
        return $this->container['css_url'];
    }

    /**
     * Sets css_url
     *
     * @param string $css_url A url pointing to custom CSS for the player to use.
     *
     * @return $this
     */
    public function setCssUrl($css_url)
    {
        $this->container['css_url'] = $css_url;

        return $this;
    }

    /**
     * Gets additionalvalues
     *
     * @return \RusticiSoftware\Cloud\V2\Model\ItemValuePairSchema[]
     */
    public function getAdditionalvalues()
    {
        return $this->container['additionalvalues'];
    }

    /**
     * Sets additionalvalues
     *
     * @param \RusticiSoftware\Cloud\V2\Model\ItemValuePairSchema[] $additionalvalues additionalvalues
     *
     * @return $this
     */
    public function setAdditionalvalues($additionalvalues)
    {
        $this->container['additionalvalues'] = $additionalvalues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


