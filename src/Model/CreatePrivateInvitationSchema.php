<?php
/**
 * CreatePrivateInvitationSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;

/**
 * CreatePrivateInvitationSchema Class Doc Comment
 *
 * @category    Class
 * @package     RusticiSoftware\Cloud\V2
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreatePrivateInvitationSchema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreatePrivateInvitationSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'course_id' => 'string',
        'creating_user_email' => 'string',
        'invitation_email' => '\RusticiSoftware\Cloud\V2\Model\InvitationEmailSchema',
        'post_back' => '\RusticiSoftware\Cloud\V2\Model\PostBackSchema',
        'expiration_date' => '\DateTime',
        'tags' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'course_id' => 'courseId',
        'creating_user_email' => 'creatingUserEmail',
        'invitation_email' => 'invitationEmail',
        'post_back' => 'postBack',
        'expiration_date' => 'expirationDate',
        'tags' => 'tags'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'course_id' => 'setCourseId',
        'creating_user_email' => 'setCreatingUserEmail',
        'invitation_email' => 'setInvitationEmail',
        'post_back' => 'setPostBack',
        'expiration_date' => 'setExpirationDate',
        'tags' => 'setTags'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'course_id' => 'getCourseId',
        'creating_user_email' => 'getCreatingUserEmail',
        'invitation_email' => 'getInvitationEmail',
        'post_back' => 'getPostBack',
        'expiration_date' => 'getExpirationDate',
        'tags' => 'getTags'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['course_id'] = isset($data['course_id']) ? $data['course_id'] : null;
        $this->container['creating_user_email'] = isset($data['creating_user_email']) ? $data['creating_user_email'] : null;
        $this->container['invitation_email'] = isset($data['invitation_email']) ? $data['invitation_email'] : null;
        $this->container['post_back'] = isset($data['post_back']) ? $data['post_back'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['course_id'] === null) {
            $invalid_properties[] = "'course_id' can't be null";
        }
        if ($this->container['creating_user_email'] === null) {
            $invalid_properties[] = "'creating_user_email' can't be null";
        }
        if ($this->container['invitation_email'] === null) {
            $invalid_properties[] = "'invitation_email' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['course_id'] === null) {
            return false;
        }
        if ($this->container['creating_user_email'] === null) {
            return false;
        }
        if ($this->container['invitation_email'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets course_id
     * @return string
     */
    public function getCourseId()
    {
        return $this->container['course_id'];
    }

    /**
     * Sets course_id
     * @param string $course_id The id of the course for which to create an invitation.
     * @return $this
     */
    public function setCourseId($course_id)
    {
        $this->container['course_id'] = $course_id;

        return $this;
    }

    /**
     * Gets creating_user_email
     * @return string
     */
    public function getCreatingUserEmail()
    {
        return $this->container['creating_user_email'];
    }

    /**
     * Sets creating_user_email
     * @param string $creating_user_email The email of the user who is creating the invitation.
     * @return $this
     */
    public function setCreatingUserEmail($creating_user_email)
    {
        $this->container['creating_user_email'] = $creating_user_email;

        return $this;
    }

    /**
     * Gets invitation_email
     * @return \RusticiSoftware\Cloud\V2\Model\InvitationEmailSchema
     */
    public function getInvitationEmail()
    {
        return $this->container['invitation_email'];
    }

    /**
     * Sets invitation_email
     * @param \RusticiSoftware\Cloud\V2\Model\InvitationEmailSchema $invitation_email
     * @return $this
     */
    public function setInvitationEmail($invitation_email)
    {
        $this->container['invitation_email'] = $invitation_email;

        return $this;
    }

    /**
     * Gets post_back
     * @return \RusticiSoftware\Cloud\V2\Model\PostBackSchema
     */
    public function getPostBack()
    {
        return $this->container['post_back'];
    }

    /**
     * Sets post_back
     * @param \RusticiSoftware\Cloud\V2\Model\PostBackSchema $post_back Specifies a URL for which to post activity and status data in real time as the course is completed
     * @return $this
     */
    public function setPostBack($post_back)
    {
        $this->container['post_back'] = $post_back;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags Optional tags to be applied to this invitation.
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RusticiSoftware\Cloud\V2\ObjectSerializer::sanitizeForSerialization($this));
    }
}


