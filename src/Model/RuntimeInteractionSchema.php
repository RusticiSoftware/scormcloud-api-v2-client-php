<?php
/**
 * RuntimeInteractionSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Cloud\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Cloud\V2\ObjectSerializer;

/**
 * RuntimeInteractionSchema Class Doc Comment
 *
 * @category Class
 * @package  RusticiSoftware\Cloud\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuntimeInteractionSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuntimeInteractionSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'objectives' => 'string[]',
        'timestamp' => 'string',
        'timestamp_utc' => 'string',
        'correct_responses' => 'string[]',
        'weighting' => 'string',
        'learner_response' => 'string',
        'result' => 'string',
        'latency' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'objectives' => null,
        'timestamp' => null,
        'timestamp_utc' => null,
        'correct_responses' => null,
        'weighting' => null,
        'learner_response' => null,
        'result' => null,
        'latency' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'objectives' => 'objectives',
        'timestamp' => 'timestamp',
        'timestamp_utc' => 'timestampUtc',
        'correct_responses' => 'correctResponses',
        'weighting' => 'weighting',
        'learner_response' => 'learnerResponse',
        'result' => 'result',
        'latency' => 'latency',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'objectives' => 'setObjectives',
        'timestamp' => 'setTimestamp',
        'timestamp_utc' => 'setTimestampUtc',
        'correct_responses' => 'setCorrectResponses',
        'weighting' => 'setWeighting',
        'learner_response' => 'setLearnerResponse',
        'result' => 'setResult',
        'latency' => 'setLatency',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'objectives' => 'getObjectives',
        'timestamp' => 'getTimestamp',
        'timestamp_utc' => 'getTimestampUtc',
        'correct_responses' => 'getCorrectResponses',
        'weighting' => 'getWeighting',
        'learner_response' => 'getLearnerResponse',
        'result' => 'getResult',
        'latency' => 'getLatency',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_TRUE_FALSE = 'TrueFalse';
    const TYPE_CHOICE = 'Choice';
    const TYPE_FILL_IN = 'FillIn';
    const TYPE_LONG_FILL_IN = 'LongFillIn';
    const TYPE_LIKERT = 'Likert';
    const TYPE_MATCHING = 'Matching';
    const TYPE_PERFORMANCE = 'Performance';
    const TYPE_SEQUENCING = 'Sequencing';
    const TYPE_NUMERIC = 'Numeric';
    const TYPE_OTHER = 'Other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRUE_FALSE,
            self::TYPE_CHOICE,
            self::TYPE_FILL_IN,
            self::TYPE_LONG_FILL_IN,
            self::TYPE_LIKERT,
            self::TYPE_MATCHING,
            self::TYPE_PERFORMANCE,
            self::TYPE_SEQUENCING,
            self::TYPE_NUMERIC,
            self::TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['objectives'] = isset($data['objectives']) ? $data['objectives'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['timestamp_utc'] = isset($data['timestamp_utc']) ? $data['timestamp_utc'] : null;
        $this->container['correct_responses'] = isset($data['correct_responses']) ? $data['correct_responses'] : null;
        $this->container['weighting'] = isset($data['weighting']) ? $data['weighting'] : null;
        $this->container['learner_response'] = isset($data['learner_response']) ? $data['learner_response'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['latency'] = isset($data['latency']) ? $data['latency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets objectives
     *
     * @return string[]
     */
    public function getObjectives()
    {
        return $this->container['objectives'];
    }

    /**
     * Sets objectives
     *
     * @param string[] $objectives objectives
     *
     * @return $this
     */
    public function setObjectives($objectives)
    {
        $this->container['objectives'] = $objectives;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets timestamp_utc
     *
     * @return string
     */
    public function getTimestampUtc()
    {
        return $this->container['timestamp_utc'];
    }

    /**
     * Sets timestamp_utc
     *
     * @param string $timestamp_utc timestamp_utc
     *
     * @return $this
     */
    public function setTimestampUtc($timestamp_utc)
    {
        $this->container['timestamp_utc'] = $timestamp_utc;

        return $this;
    }

    /**
     * Gets correct_responses
     *
     * @return string[]
     */
    public function getCorrectResponses()
    {
        return $this->container['correct_responses'];
    }

    /**
     * Sets correct_responses
     *
     * @param string[] $correct_responses correct_responses
     *
     * @return $this
     */
    public function setCorrectResponses($correct_responses)
    {
        $this->container['correct_responses'] = $correct_responses;

        return $this;
    }

    /**
     * Gets weighting
     *
     * @return string
     */
    public function getWeighting()
    {
        return $this->container['weighting'];
    }

    /**
     * Sets weighting
     *
     * @param string $weighting weighting
     *
     * @return $this
     */
    public function setWeighting($weighting)
    {
        $this->container['weighting'] = $weighting;

        return $this;
    }

    /**
     * Gets learner_response
     *
     * @return string
     */
    public function getLearnerResponse()
    {
        return $this->container['learner_response'];
    }

    /**
     * Sets learner_response
     *
     * @param string $learner_response learner_response
     *
     * @return $this
     */
    public function setLearnerResponse($learner_response)
    {
        $this->container['learner_response'] = $learner_response;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets latency
     *
     * @return string
     */
    public function getLatency()
    {
        return $this->container['latency'];
    }

    /**
     * Sets latency
     *
     * @param string $latency latency
     *
     * @return $this
     */
    public function setLatency($latency)
    {
        $this->container['latency'] = $latency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


